-- COMENTARIOS EN UNA SOLA LINEA
-- Comentarios de una sola linea

/*Comentarios 
de multiples 
linas
cerrar manuelamente 
con
*/

-- SQL (STRUCTURED QUERY LANGUAJE, O LENGUAJE DE CONSULTA ESTRUCTURADO)
-- ¿Qué es una base de datos?
-- Conjunto de datos relacionado entre si y que son almacenados en tablas

-- DDL (Datra Definition Languaje, o lenguaje de definicion de datos
-- Son comandos que se utilizan para crear o modificar la estructra u objetos
-- de base de datos (tablas, procedimientos, secuencias, disparadores)

-- La estructura de una tabla de una base de datos relacional es
-- la siguiente
-- Toda la tabla debe llevar por lo menos una llave primaria (PRIMARY KEY)
-- Y regularmente este valor en numérico entero
-- Pueden llevar llave foranea (FOREING KEY), lo cual es un ID o llave PRIMARIA
-- proveniente de otra tabla
-- Columnas con los diferentes tipos de datos
-- Vamos a enfocarnos en Oracle en 3 tipos de dato importantes;
-- NUMER- Admite datos numéricos enteros y decimales
-- NVARCHAR2 - Este tipo de dato admite caracteres alfanumericos y especiales
-- además de que tiene una mejor gestion de memoria
-- (Ej. Quuiero almacenar 20 caracteres indico NVARCHAR(20))
-- DATE - Admite almacenar fechar y hora

-- Vamos a iniciar conociendo las sentencias para crear nuestras tablas
-- y su estructura

-- Ej. VAMOS A CREAR UNA TABLA PARA GUARDAR INFORMACIÓN DE ALUMNOS
-- ALUMNOS
-- ALUMNO_ID
-- NOMBRE
-- FECHANAC
-- GRADO
-- CIUDAD
-- STATUS (SI ESTA INSCRITO O NO)

/*SINTAXIS BÁSICA PARA CREACIÓN DE TABLAS
CREATE TABLE nombreTabla(
nombreColumna TIPODATO PRIMARY KEY,
COLUMNA2 TIPODATO,
COLUMNA3 TIPODATO...
);
*/

CREATE TABLE ALUMNO(
ALUMNO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2 (20),
GRADO NVARCHAR2(30),
CIUDAD NVARCHAR2(30),
STATUS NUMBER
);

--COMANDO PARA ELIMINAR TABLAS CON TODO Y DATOS SI ES QUE LOS TUVIERA

DROP TABLE ALUMNO;

--COMANDO PARA VER LA ESTRUCTURA DE UNA TABLA CREADA
DESCRIBE ALUMNO;

-- CREAR OTRA TABLA PARA ALMACENAR LA INFO DE LAS CARRERAS
CREATE TABLE CARRERAS(
CARRERA_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NVARCHAR2(30)
);

-- VAMOS A CREAR UNA TABLA PARA RELACIONAR LAS CARRERAS Y LOS ALUMNOS INSCRITOS
-- PARA QUE TENGA LA POSIBILIDAD DE TENER MÁS DE UNA CARRERARA  (CARDINALIDA
-- UNO A MUCHOS O MUCHOS A UNO M:1)

CREATE TABLE CARRERAS_ALUMNOS(
CA_ID NUMBER PRIMARY KEY,
CARRERA_ID NUMBER,
ALUMNO_ID NUMBER
);
 desc carreras_alumnos

-- RESTRICCIONES 
-- VAMOS A CREAR RESTRICCIONES EN NUESTRAS TABLAS
-- EJEMPLO DE RESTRICCION DE TIPO CHECK (SE VA A VERIFICAR O VALIDAR
-- QUE LA INFORMACIÓN QUE SE INGRESE EN DICHA COLUMNA, SEA LA QUE DTERMINEMOS)
--EJ . QUE EN LA COLUMNA GENERO DE LA TABLA ALUMNO SOLO PUEDAN INGRESAR
-- 'MASCULINO' O 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHK_GENERO
CHECK (GENERO IN ('MASCULINO','FEMENINO'));

--COMANDO PARA ELIMINAR UNA RESTRICCION DE UNA TABLA
ALTER TABLE ALUMNO DROP CONSTRAINT CHK_GENERO;

-- RESTRICCION DE TIPO UNIQUE
-- NOS PERMITEN CREAR UNA RESTRICCION PARA VALORES UNICOS, CUANDO ESTOS
-- NO SON LLAVES PRIMARIAS
-- EJ. NO SE PUEDEN O DEBEN REPETIR LOS NOMBRES DE LAS CARRERAS
ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

--CREACION DE LLAVES FORANEAS
-- ESTO TAMBIÉN ES UNA RESTRICCIÓN, PORQUE PRIMERO DEBEN EXISTIR LOS VALORES
-- DE LOS IDS O LLAVES PRIMARIAS EN SUS RESPECTIVAS TABLAS
-- PARA PODER RELACIONARSE
-- CUANDO UNA TABLA LLEVA UNA LLAVE FORANEA, SE LE CONOCE COMO 
-- ENTIDAD DEBIL.
-- CUANDO UNA TABLA NO LLEVA LLAVES FORANEAS, ES DECIR, SUS DATOS NO DEPENDEN 
-- DE OTRA TABLA , SE LE CONOCE COMO ENTIDAD FUERTE

--CREAR LA RESTRICCION DE LLAVE FORANEA PARA LA TABLA CARRERAS_ALUMNOS
-- PARA RECIBIRNEL ID DE LA CARRERA (CARRERA_IS)
/*ALTER TABLE nombredetabla ADD CONSTRAINT nombre restriccion
FOREIGN KEY (Nombre de la columna donde recibimos el valor)
REFERENCES nombreTabla (columna de la tabla de donde viene el valor)
*/

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_CARRERA_ID
FOREIGN KEY (CARRERA_ID)
REFERENCES CARRERAS (CARRERA_ID);

-- CREAR LLAVE FORANEA PARA LA COLUMNA ALUMNO_ID EN LA TABLA CARRERAS_ALUMNOS
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ALUMNO_ID
FOREIGN KEY (ALUMNO_ID) -- EN QUE COLUMNA RECIBIMOS EL DATO
REFERENCES ALUMNO (ALUMNO_ID); -- DE QUE TABLA Y COLUMNA PROVIENE ESE DATOS

--SENTENCIAS DML (Data Manipulation Languaje) - Lenguaje de Manipulación
--de datos
--CRUD, Create, read, update, delete

-- INSERT - Insertar o crar registros en nuestras tablas
--EJ. INSERTAR VALORES EN LA TABLA ALUMNO 

DESCRIBE ALUMNO;
--VERIFICAMOS PRIMERO ANTES DE INSERTAR FECHAS, CUAL ES EL FORMATO DE FECHA DEL SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1, 'ALVARO', '03/01/1999', 'MASCULINO', '1ER SEMESTRE', 'CDMX', 1);

INSERT INTO ALUMNO VALUES
(2, 'ALEX', '24/04/1994', 'MASCULINO', '2DO SEMESTRE', 'PUEBLA', 1);

INSERT INTO ALUMNO VALUES
(3, 'CARMEN', '02/06/2002', 'FEMENINO', '3ER SEMESTRE', 'XALAPA', 1);

INSERT INTO ALUMNO VALUES
(4, 'CLAUDIA', '10/02/1998', 'FEMENINO', '1ER SEMESTRE', 'GUERRERO', 1);

-- CONSULTAR INFO DE NUESTRAS TABLAS
-- CONSULTA GENERAL
SELECT * FROM ALUMNOS;

-- PARA QUE LOS REGISTROS PERMANEZCAN EN LA BASE DE DATOS, HAY
-- QUE CONFIRMARLOSS
-- ESTO ES UNICAMENTE PARA REGISTROS (DML)
COMMIT;


-- NISERTAR RESGISTROS EN LA TABLA CARRERAS
DESCRIBE CARRERAS;
SELECT * FROM CARRERAS;

INSERT INTO CARRERAS VALUES(1, 'NUTRICION', 'BIOLOGICAS', '8 SEMESTRES');

INSERT INTO CARRERAS VALUES(2, 'SISTEMAS', 'COMPUTACIONALES', '9 SEMESTRES');

INSERT INTO CARRERAS VALUES(3, 'ADMINISTRACION DE EMPRESAS', 'ECONOMICAS', '8 SEMESTRES');

COMMIT;

-- ACTUALIZAR UN CAMPO EN EL CUAL TUVIMOS UN ERROR O HAY QUE MODIFICARLO
UPDATE ALUMNO SET STATUS = 1; -- ESTA SENTENCIA CAMBIA EL STATUS DEL ALUMNO A 1 PERO EN TODAS LAS FILAS

--SI QUEREMOS CAMBIAR EL STATUS DE UN SOLO ALUMNO, 
-- TENEMOS QUE ESPECIFICAR QUE ALUMNO
UPDATE ALUMNOS SET STATUS = 0 WHERE ALUMNO_ID=3;

-- VAMOS A CREAR UNA TABLA QUE NOS FUNCIONE COMO CATALO PARA
-- SABER QUE SIGNIFICAN LOS ESTATUS DE LOS ALUMNOS
CREATE TABLE STATUS_ALUMNOS(
STATUS_ID NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(40)
);

-- HACEMOS INSERCIONES EN ESTA TABLA 
INSERT INTO STATUS_ALUMNOS VALUES (0, 'EL ALUMNO ESTA INACTIVO, NO INSCRITO');
INSERT INTO STATUS_ALUMNOS VALUES (1, 'EL ALUMNO ESTA ACTIVO');

SELECT * FROM STATUS_ALUMNOS;


-- VAMOS A CREAR UNA RESTRICCION DE LLAVE FORANEA,PARA QUE SOLOA PODAMOS INSERTAR
-- ALUMNOS CON EL STATUS DEFINIDO EN EL CATALOGO
ALTER TABLE ALUMNO ADD CONSTRAINT FK_STATUS
FOREIGN KEY (STATUS)
REFERENCES STATUS_ALUMNOS (STATUS_ID);

-- SI NOS EQUIVOCAMOS EN EL NOMBRE DE UNA COLUMNA Y QUEREMOS CORREGIRLO
ALTER TABLE STATUS_ALUMNOS RENAME COLUMN SATUS_ID TO STATUS_ID;

-- CAMBIAR EL NOMBRE DE UNA TABLA, PERO FUNCIONA MEJOR CUANDO APENAS CREAMOS LA TABLA
ALTER TABLE ALUMNO RENAME TO ALUMNOS;


-- INSERTAR VALORES EN LA TABLA RELACIONAL CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
-- DEBEN EXISTIR PRIMERO LOS DATOS EN LAS OTRAS TABLAS, PARA PODER RELACIONARSE AQUI
INSERT INTO CARRERAS_ALUMNOS VALUES (1,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,3,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,2,3);

--CONFIRMO MIS REGISTROS
COMMIT;
SELECT * FROM CARRERAS_ALUMNOS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- EJ. COLUMNA LLAMADA PRESUPUESTO EN LA TABLA CARRERAS
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);
DESCRIBE CARRERAS;

SELECT * FROM CARRERAS;

--CAMBIAR EL TIPO DE DATO DE UNA COLUMNA, SIEMPRE Y CUANDO NO TENGA DATOS
-- EJ. CAMBIAR EL DATO DE LA COLUMNA PRESUPUESTO A NVARCHAR2
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NVARCHAR2(35);

------------EJERCICIO BD ALUMNOS---------------
CREATE TABLE TUTORES(
TUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
CLAVETUTOR CHAR (1)
);

ALTER TABLE TUTORES ADD CONSTRAINT CHK_CLAVETUTOR
CHECK (CLAVETUTOR IN ('A', 'B', 'C', 'D'));

DESCRIBE TUTORES;
SELECT * FROM TUTORES;

INSERT INTO TUTORES VALUES (1, 'JORGE', 'A' );
INSERT INTO TUTORES VALUES (2, 'CESAR', 'B' );
INSERT INTO TUTORES VALUES (3, 'MARIANO', 'C' );
INSERT INTO TUTORES VALUES (4, 'JORGE', 'D' );
COMMIT;

-----
CREATE TABLE TUTORES_ALUMNOS(
TA_ID NUMBER PRIMARY KEY,
TUTOR_ID NUMBER,
ALUMNO_ID NUMBER
);
SELECT * FROM TUTORES_ALUMNOS;
DESCRIBE TUTORES_ALUMNOS;
ALTER TABLE TUTORES_ALUMNOS ADD CONSTRAINT FK_TUTOR_ID
FOREIGN KEY (TUTOR_ID)
REFERENCES TUTORES (TUTOR_ID);

ALTER TABLE TUTORES_ALUMNOS ADD CONSTRAINT FK_ALUMNO_ID_TA
FOREIGN KEY (ALUMNO_ID)
REFERENCES ALUMNOS (ALUMNO_ID);

INSERT INTO TUTORES_ALUMNOS VALUES (1, 1, 1);
INSERT INTO TUTORES_ALUMNOS VALUES (2, 4, 2);
INSERT INTO TUTORES_ALUMNOS VALUES (3, 4, 4);
INSERT INTO TUTORES_ALUMNOS VALUES (4, 2, 6);
--VACIAR LOS DATOS DE TODA MI TABLA
TRUNCATE  TABLE TUTORES_ALUMNOS;
SELECT
    * FROM TUTORES_ALUMNOS;
COMMIT;


---------------------------------------------------
-------     EJERCICIO BIBLIOTECA    ---------------
---------------------------------------------------

CREATE TABLE AUTORES (
AUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (35),
NACIONALIDAD NVARCHAR2(35)
);

CREATE TABLE SOCIOS(
SOCIO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (35),
DIRECCION NVARCHAR2 (50),
TELEFONO NUMBER (10)
);

CREATE TABLE LIBROS (
LIBRO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (25),
AUTOR_ID NUMBER,
CANITDAD NUMBER,
CONSTRAINT FK_AUTOR_ID
FOREIGN KEY (AUTOR_ID)
REFERENCES AUTORES(AUTOR_ID)
);

CREATE TABLE REGISTROS_PRESTAMO (
PRESTAMO_ID NUMBER PRIMARY KEY,
SOCIO_ID NUMBER,
LIBRO_ID NUMBER,
FECHA_PRESTAMO DATE,
FECHA_DEVOLUCION DATE,
CONSTRAINT FK_SOCIO_ID
FOREIGN KEY (SOCIO_ID)
REFERENCES SOCIOS (SOCIO_ID),
CONSTRAINT FK_LIBRO_ID
FOREIGN KEY (LIBRO_ID)
REFERENCES LIBROS(LIBRO_ID)
);
DROP TABLE REGISTROS_PRESTAMO;
--ALTER TABLE STATUS_ALUMNOS RENAME COLUMN SATUS_ID TO STATUS_ID;
ALTER TABLE REGISTROS_PRESTAMO RENAME COLUMN FECHAR_DEVOLUCION TO FECHA_DEVOLUCION;
DESCRIBE AUTORES;
INSERT INTO AUTORES VALUES (1, 'CHARLES', 'BOGOTA');
INSERT INTO AUTORES VALUES (2, 'CANSERBERO', 'VENEZUELA');
INSERT INTO AUTORES VALUES (3, 'OSITOS', 'MEICO');
INSERT INTO AUTORES VALUES (4, 'MIGUEL DE CERVANTES', 'MEXICO');
INSERT INTO AUTORES VALUES (5, 'TOLKIEN', 'USA');
SELECT * FROM AUTORES;
COMMIT;

DESCRIBE SOCIOS;
INSERT INTO SOCIOS VALUES (1, 'CARLOS', 'CDMX', 7121454544);
INSERT INTO SOCIOS VALUES (2, 'RAFAEL', 'MONTERREY', 5544248989);
INSERT INTO SOCIOS VALUES (3, 'ERNES', 'XALAPA', 9898986434);
INSERT INTO SOCIOS VALUES (4, 'FABIOLA', 'SAN LUIS', 4536283382);
INSERT INTO SOCIOS VALUES (5, 'JERONIMO', 'CDMX', 2122898966);
SELECT * FROM SOCIOS;
COMMIT;

DESCRIBE LIBROS;
INSERT INTO LIBROS VALUES (1, 'QUIJOTE', 1, 2);
INSERT INTO LIBROS VALUES (2, 'ODISEA', 3, 5);
INSERT INTO LIBROS VALUES (3, 'CODIGO DA VINCI', 4, 3);
INSERT INTO LIBROS VALUES (4, 'SHUECK', 2, 10);
INSERT INTO LIBROS VALUES (5, 'HOMERO', 5, 2);
SELECT * FROM LIBROS;
COMMIT;

DESCRIBE REGISTROS_PRESTAMO;
INSERT INTO REGISTROS_PRESTAMO VALUES(1, 1, 5, '10/05/2022', '10/05/2023');
INSERT INTO REGISTROS_PRESTAMO VALUES(2, 2, 4, '20/01/2023', '01/05/2023');
INSERT INTO REGISTROS_PRESTAMO VALUES(3, 5, 3, '02/02/2021', '02/02/2022');
INSERT INTO REGISTROS_PRESTAMO VALUES(4, 4, 2, '25/09/2019', '25/09/2021');
INSERT INTO REGISTROS_PRESTAMO VALUES(5, 3, 1, '01/01/2024', '01/06/2024');
SELECT * FROM REGISTROS_PRESTAMO;
COMMIT;


-----------------------------------------------
--------06/06/2024---------------------
--------------------------------------------

-- CREAR SECUENCIAS Y DISPARADORES 
-- CREAR SECUENCIAS
-- LA SECUENCIA SON OBJETOS QUE NOS PERMITEN GENERAR VALORES DE
-- NUMEROS ENTEROS DE FORMA CONSECUTIVA Y PUEDEN SER CON 
-- UN INCREMENTO DETERMINADO (DE 1 EN 1, DE 2 EN 2, ETC)
-- SE UTILIZAN PARA GENERAR LLAVES PRIMARIAS Y ASÍ ASEGURARNOS
-- QUE LOS VALORES NO SE REPITAN

-- EJ. DE SINTAXIS PARA CREAE UNA SECUENCIA PARA UNA TABLA CUANDO
-- YA TENEMOS REGISTROS ALMACENADOS
SELECT * FROM ALUMNOS;

CREATE SEQUENCE ALUMNOS_SEQ  --SECUENCIA Y SU NOMBRE
START WITH 5  -- EL VALOR EN EL QUE INICA
INCREMENT BY 1 -- EL INCREMENTO DE LA SECUENCIA 
MAXVALUE 999 --EL VALOR MÁXIMO AL QUE LLEGA SU CONTEO
MINVALUE 1 -- EL VALOR MÍNIMO DE LA SECUENCIA
NOCYCLE; --INDICAMOS SI SE CICLA (CYCLE) O NO (CYCLE)

-- VAMOS A CREAR UN PROCEDIMIENTO CONOCIDO COMO DISPARADOR
-- O TRIGGER. SON UN TIPO DE PROCEDIMIENTO ALMACENADO QUE NOS PERMITE 
-- DESENCADENAR UN EVENTO. EN ESTE CASO LO UTILIZAREMOS PARA INSERTAR
-- LOS VALORES DE LOS IDS QUE SE TOMARAN DE LA SECUENCIA

-- EJ. DE SINTAXIS PARA UN TRIGGER PARA LA TABLA ALUMNOS
CREATE OR REPLACE TRIGGER INSERT_ALUMNOS -- NOMBRE DE TRIGGER
BEFORE INSERT ON ALUMNOS FOR EACH ROW BEGIN --DONDE ACUTUA (TABLA)
SELECT ALUMNOS_SEQ.NEXTVAL INTO:NEW.ALUMNO_ID FROM DUAL; -- (QUE HACE)
END;

-- EJ. DE COMO INSERTAR VALORES AHORA EN NUESTRA TABLA
INSERT INTO ALUMNOS VALUES
(1, 'DANIE', '26/06/2000', 'MASCULINO', '8O SEMESTRE', 'TOLUCA', 1);
SELECT * FROM ALUMNOS;


-- OTRA FORMA DE INSERTAR UN REGISTRO UNA VEZ QUE TENEMOS UN DISPARADOR 
-- SERIA OMITIENDO EL ID
INSERT INTO ALUMNOS (NOMBRE,FECHANAC,GENERO,GRADO,CIUDAD,STATUS) VALUES
('MIGUEL', '26/07/200', 'MASCULINO', '9O SEMESTRE', 'CUERNAVACA', 1);

-- VAMOS A CREAR UNA TABLA VACIA PARA PODER CREAR UNA SECUENCIA CON VALORES 
-- POR DIRECTO
CREATE TABLE CLIENTES(
CLIENTE_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(15),
DIRECCION NVARCHAR2(40),
INE NVARCHAR2 (10),
TELEFONO NVARCHAR2(10)
);

-- EJ. CREAR UNA SECENCIA CON VALORES POR DEFECTO
CREATE SEQUENCE CLIENTES_SEQ;
--- CREAMOS SU DISPARADOR
CREATE OR REPLACE TRIGGER INSERT_CLIENTES -- NOMBRE DE TRIGGER
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN --DONDE ACUTUA (TABLA)
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.CLIENTE_ID FROM DUAL; -- (QUE HACE)
END;

-- EJ- INSERTAR 2 CLIENTES
INSERT INTO CLIENTES VALUES (1,'MANUEL','TAMPICO','1234567890','2345127899');
INSERT INTO CLIENTES VALUES (1,'FRANCISCO','NVO LAREDO','1234567899','2345127812');

SELECT * FROM CLIENTES;

COMMIT;

-- ACTUALIZAR DATOS DE UN REGISTRO
SELECT * FROM ALUMNOS;

UPDATE ALUMNOS SET GRADO= '70 SEMESTRE', CIUDAD='CUAUTLA' WHERE ALUMNO_ID=6;

-- SENTENCIA PARA ELIMINAR REGISTROS DE UNA TABLA
DELETE FROM ALUMNOS WHERE ALUMNO_ID=1; -- NO PUEDO BORRAR UN REGISTRO DE UN ALUMNO
-- QUE TIENE RELACION CON UNA CARRERA

-- PERO SI PUEDO BORRAR UN ALUMNO QUE NO ESTE RELACIONADO EN LA TABLA CARRERAS_ALUMNOS
DELETE FROM ALUMNOS WHERE ALUMNO_ID=5;

-- QUE PASA SI TENEMOS UNA TABLA QUE NO TIENE RELACIONES, SI NO INDICO EL ID
DELETE FROM CLIENTES; --ESTO ELIMINA A TODOS MIS CLIENTES, SI NO INDICO EL ID
SELECT * FROM CLIENTES;

-- PODEMOS UTILIZAR UN ROLLBACK PARA IR AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;


-- CONSULTAR CIERTAS COLUMNAS DE UNA TABLA
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS;
SELECT * FROM ALUMNOS WHERE NOMBRE = 'ALVARO';
SELECT * FROM ALUMNOS;
--CONSULTAR DATOS DE UNA TABLA DE ACUERDO A UNA SOLA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD ='PUEBLA';

--CONSULTAR DATOS DE UNA TABLA DE ACUERDO A MÁS DE UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD ='XALAPA' AND NOMBRE='CARMEN';

-- VAMOS A MODIFICAR NUEVAMENTE EL DATO DE LA TABLA CARRERAS EN LA COLUMNA
-- PRESUPUESTO
DESCRIBE CARRERAS;
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NUMBER;
SELECT * FROM CARRERAS;

-- DATOS QUE SE ENCUENTREN ENTRE UN RANGO ESPECIFICO DE VALORES
SELECT NOMBRE, PRESUPUESTO FROM CARRERAS WHERE PRESUPUESTO BETWEEN 20000 AND 30000;

-- CONSUTAR INFORMACION CON VALORES DE CARACTERES SIMILARES
SELECT  * FROM ALUMNOS WHERE NOMBRE LIKE 'C%';

SELECT  * FROM ALUMNOS WHERE NOMBRE LIKE '%A';

-- FUNCIONES DE AGREGACIONA
-- CONSULTAR EL VALOR MAXIMO DE UNA COLUMNA EN UNA TABLA
SELECT MAX(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL VALOR MÓNIMO DE UNA COLUMNA EN UNA TABLA
SELECT MIN(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR LA SUMA DE LOS VALORES DE UNA COLUMNA 
SELECT SUM (PRESUPUESTO) FROM CARRERAS;
SELECT SUM (CANITDAD) FROM LIBROS;

-- RELIZAR EL CONTEO DE REGISTROS DE UNA TABLA
SELECT COUNT (*) FROM ALUMNOS;

--FUNCION GROUP BY
SELECT COUNT (*), GENERO FROM ALUMNOS GROUP BY GENERO;

-- ORDENAR LOS REGISTROS DE ACUERDO A UN CRITERIO
SELECT * FROM ALUMNOS;

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID; --EN UN ORDEN ASCENDENTE

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID DESC; -- EN ORDEN DESCENDENTE

SELECT * FROM ALUMNOS ORDER BY NOMBRE;


-- EJ. DE UNA CONSULTA ANIDADA
-- (CONSULTA DENTRO DE OTRA)
SELECT MAX(PRESUPUESTO) FROM CARRERAS; -- ESTO ME DEVUELVE EL VALOR MAXIMO DE PRESUPUESTO

-- CONSULTAR LA CARRERA CON EL PRESUPUESTO MÁS ALTO
SELECT * FROM CARRERAS WHERE PRESUPUESTO = (SELECT MAX(PRESUPUESTO) FROM CARRERAS); -- CONSUKTA ANIDADA

--ACTIVIDAD--
-- VAN A CREAR UNA SECUENCIA PARA CADA TABLA DE LA BASE DE DATOS DE LA BIBLIOTECA
-- Y UNA VEZ TENGAN LA SECUENCIA, CREAN  EL DISPARADOR PARA CADA SECIENCIA Y CADA TABLA

CREATE SEQUENCE AUTORES_SEQ  --SECUENCIA Y SU NOMBRE
START WITH 6  -- EL VALOR EN EL QUE INICA
INCREMENT BY 1 -- EL INCREMENTO DE LA SECUENCIA 
MAXVALUE 999 --EL VALOR MÁXIMO AL QUE LLEGA SU CONTEO
MINVALUE 1 -- EL VALOR MÍNIMO DE LA SECUENCIA
NOCYCLE; --INDICAMOS SI SE CICLA (CYCLE) O NO (CYCLE)


CREATE OR REPLACE TRIGGER INSERT_AUTORES -- NOMBRE DE TRIGGER
BEFORE INSERT ON AUTORES FOR EACH ROW BEGIN --DONDE ACUTUA (TABLA)
SELECT AUTORES_SEQ.NEXTVAL INTO:NEW.AUTOR_ID FROM DUAL; -- (QUE HACE)
END;
DESCRIBE AUTORES;
-- EJ. DE COMO INSERTAR VALORES AHORA EN NUESTRA TABLA
INSERT INTO AUTORES VALUES
(8, 'JOSUE', 'BASILEÑA');
SELECT * FROM AUTORES;

COMMIT;

-- CONSULTA CON JOINS -- 
-- NOS PERMITE UNIR DOS O MÁS TABLAS EN UN CAMPO QUE COMPARTEN EN COMÚN
-- PARA PODER VER LA INFORMACIÓN DE LAS FILAS QUE COMPARTEN 

--INNER JOIN 
-- UNE LA TABLA "A" CON UNA TABLA "B" Y MUESTRA LAS FILAS CONCIDENTES

SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

SELECT * FROM ALUMNOS;

-- FULL OUTER JOIN 
-- MUESTRA TODAS LAS FILAS TANTO DE LA TABLA "A" COMO DE LA TABLA "B"
SELECT * FROM ALUMNOS
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

-- LEFT JOIN - MUESTRA TODAS LAS FILAS DE LA TABLA "A" Y SOLO LO COINCIDENTE CON LA "B"
-- RIGHT JOIN - MUESTRA TODAS LAS FILAS DE LA TABLA "B" Y SOLO LO COINCIDENTE CON LA "A"
SELECT * FROM ALUMNOS
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

-- PODEMOS UNIR MÁS TABLAS, UNA TERCERA, EN ESTE CASO CARRERAS
SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

--PODEMOS SELECCIONAR TAMBIÉN SOLO DETERMINAR INFO A MOSTRAR
SELECT ALUMNOS.ALUMNO_ID, ALUMNOS.NOMBRE, CARRERAS.NOMBRE, CARRERAS.AREA FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

--IDENTIFICAR NUESTRAS TABLAS SPOR ALIAS
SELECT A.ALUMNO_ID, A.NOMBRE, C.NOMBRE, C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

--IDENTIFICAR NUESTRAS TABLAS SPOR ALIAS (ENCABEZADO)
SELECT A.ALUMNO_ID AS MATRICULA, A.NOMBRE AS ALUMNO, C.NOMBRE AS CARRERA, C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

-- ACTIVDAD 
-- REALIZAR UN JOIN,EL QUE GUSTEN, PARA QUE MUESTRES EL NOMBRE DEL SOCIO, NOMBRE DEL LIBRO
-- Y FECHA DE DEVOLUCION DEL LIBRO

COMMIT;