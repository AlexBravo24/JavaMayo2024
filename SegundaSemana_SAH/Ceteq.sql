-- COMENTARIOS DE UNA SOLA LINEA
--Comentarios de una sola linea

/*Comentarios
de 
multiples 
lineas
*/

-- SQL(STRUCTURED QUERY LANGUAGE, O LENGUAJE DE CONSULTA ESTRUCTURADA)
-- ¿Qué es una base de datos?
--Conjunto de datos relacionados entre si y que son almacenados en tablas

--DDL (Data Definition Language, o Lenguaje de definicion de datos
--Son comandos que se utilizan para crear o modificar la estructura u onjetos
-- de base de datos(tablas, procedimientos, secuencias, disparadores)

--La estructura de un tabla de una base de datos relacionales 
--la siguiente:
--Toda tabla debe llevar por lo menos una llave primaria (PRIMARY KEY)
--y regularmente este valor es numérico entero
--Pueden llevar llave foranea (FOREIGN KEY), lo cual es un ID o llave primaria
--Columnas con los diferentes tipos de dato
--Vamos a enfocarnos en Oracle en 3 tipos de dato importantes:
--NUMBER - Admite datos numéricos enteros y decimales
-- NVARCHAR2 -Este tipo de dato admite caracteres alfanumericos y especiales
-- además de que tiene una mejor gestión de memoria
-- (Ej. Quiero almacenar 20 caracteres indico NVARCHAR2(20))
-- DATE - Admite almacenar fecha y hora

--Vamos a iniciar conociendo las sentencias para crear nuestras tablas
--y su estructura

--EJ. VAMOS A CREAR UNA TABLA PARA GUARDAR INFORMACIÓN DE ALUMNOS
-- ALUMNOS
-- ALUMNOS_ID 
-- NOMBRE
-- FECHANAC
-- GENERO
-- GRADO
-- CIUDAD
-- STATUS (SI ESTÁ INSCRITO O NO)

/*SINTAXIS BÁSICA PARA CREACIÓN DE TABLAS
CREATE TABLE nombreTabla(
nombreColumna TIPODATO PRIMARY KEY,
columna2 TIPODATO,
columna3 TIPODATO.....
);
*/

CREATE TABLE ALUMNOS(
ALUMNO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(20),
GRADO NVARCHAR2(30),
CIUDAD NVARCHAR2(30),
STATUS NUMBER
);

-- COMANDO PARA ELIMINAR TABLAS CON TODO Y DATOS SI ES QUE LOS TUVIERA
DROP TABLE ALUMNOS;

--COMANDO PARA VER LA ESTRUCTURA DE UNA TABLA CREADA
DESCRIBE ALUMNO;

--VAMOS A CREAR OTRA TABLA PARA ALMACENAR LA INFO DE LAS CARRERAS
CREATE TABLE CARRERAS(
CARRERA_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NVARCHAR2(30)
);

--VAMOS A CREAR UNA TABLA PARA RELACIONAR LAS CARRERAS Y LOS ALUMNOS INSCRITOS
--PARA QUE TENGAN LA POSIBILIDAD DE TENER MÁS DE UNA CARRERA (CARDINALIDAD
-- UNO A MUCHOS O MUCHOS A UNO M:1)

CREATE TABLE CARRERAS_ALUMNOS(
CA_ID NUMBER PRIMARY KEY,
CARRERA_ID NUMBER, 
ALUMNO_ID NUMBER
);

DESCRIBE CARRERAS_ALUMNOS;

-- RESTRICIONES
-- VAMOS A CREAR RESTRICCIONES EN NUESTRAS TABLAS
-- EJEMPLO DE RESTRICCION DE TIPO CHECH(SE VA A VERIFICAR O VALIDAR
-- QUE LA INFORMACION QUE SE INGRESE EN DICHA COLUMNA, SEA LA QUE DETERMINEMOS)
-- EJ. QUE EN LA COLUMNA GENERO DE LA TABLA ALUMNO SOLO PUEDAN INGRESAR
-- 'MASCULINO' O 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHK_GENERO
CHECK (GENERO IN('MASCULINO','FEMENINO'));

-- COMANDO PARA ELIMINAR UNA RESTRICCION DE UNA TABLA
ALTER TABLE ALUMNO DROP CONSTRAINT CHK_GENERO;

--RESTRICCION DE TIPO UNIQUE
-- NOS PERMITEN CREAR UNA RESTRICCION PARA VALORES UNICOS, CUANDO ESTOS
-- NO SON LLAVES PRIMARIAS
--EJ. NO SE PUEDEN O DEBEN REPETIR LOS NOMBRES DE LAS CARRERAS
ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE(NOMBRE);

--CREACIÓN DE LLAVES FORANEAS
-- ESTO TAMBIÉN ES UNA RESTRICCION, PORQUE PRIMERO DEBEN EXISTIR LOS VALORES
-- DE LOS IDS O LLAVES PRIMARIAS EN SUS RESPECTIVAS TABLAS
--PARA PODER RELACIONARSE
-- CUANDO UNA TABLA LLEVA UNA LLAVE FORANEA, SE LE CONOCE COMO
-- ENTIDAD DEBIL.
-- CUANDO UNA TABLA NO LLEVA LLAVES FORANEAS, ES DECIR, SUS DATOS NO DEPENDEN
-- DE OTRA TABLA, SE LE CONOCE COMO ENTIDAD FUERTE

--CREAR LA RESTRICCION DE LA LLAVE FORANEA PARA LA  TABLA CARRERAS_ALUMNOS
-- PARA RECIBIR EL ID DE LA CARRERA (CARRERA_ID)
/*ALTER TABLE nombreedtabla ADD CONSTRAINT nombre restriccion
FOREING KEY (Nombre de la columna donde recibimos el valor)
REFERENCES nombreTabla (columna de la tabla de donde viene el valor);
*/

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_CARRERAS_ID
FOREIGN KEY(CARRERA_ID)
REFERENCES CARRERAS (CARRERA_ID);

-- CREAR LLAVE FORANEA PARA LA COLUMNA ALUMNO_ID EN LA TABLA CARRERAS_ALUMNOS

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ALUMNO_ID
FOREIGN KEY(ALUMNO_ID) -- EN QUE COLUMNA RECIBIMOS EL DATO
REFERENCES ALUMNO (ALUMNO_ID); -- QUE TABLA Y COLUMNA PROVIENE ESE DATO

-- SENTENCIAS DML (Data Manipulation Language) - Lenguaje de manipulacion 
--de datos
-- CRUD,Create, Read, Update, Delete
 --INSERT - Insertar o crear registros en nuestras tablas
 -- EJ. INSERTAR VALORES EN LA TABLA ALUMNO
 DESCRIBE ALUMNO;
 -- VERIFICAMOS PRIMERO ANTES DE INSERTAR FECHAS, CUAL ES EL FORMATO DE LA FECHA DEL SISTEMA
 SELECT SYSDATE FROM DUAL;
 
 INSERT INTO ALUMNO VALUES (1, 'ANDRES', '26/03/1994', 'MASCULINO', '1ER SEMESTRE', 'CDMX',1);
 
INSERT INTO ALUMNO VALUES
(2, 'ANDRES', '24/04/1994', 'MASCULINO', '2DO SEMESTRE', 'PUEBLA',1);

INSERT INTO ALUMNO VALUES
(3, 'Claudia','02/07/2002', 'FEMENINO', '3ER SEMESTRE', 'XALAPA',1);

INSERT INTO ALUMNO VALUES
(4, 'SANDRA','02/10/2005', 'FEMENINO', '2DO SEMESTRE', 'XALAPA',1);

--CONSULTAR LA INFO DE NUESTRAS TABLAS
-- CONSULTA GENERAL
SELECT * FROM ALUMNO;

--PARA QUE LOS REGISTROS PERMANEZCAN EN LA BASE DE DATOS, HAY QUE
--CONFIRMARLOS
-- ESTO ES UNICAMENTE PARA REGISTROS (DML)  
COMMIT;


--INSERTAR REGISTROS EN LA TABLA CARRERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES (1, 'NUTRICION', 'BIOLOGICAS', '8 SEMESTRES');

INSERT INTO CARRERAS VALUES (2, 'ING. EN SISTEMAS', 'EXACTAS', '8 SEMESTRES');

INSERT INTO CARRERAS VALUES (3, 'ADMINISTRACION DE EMPRESAS', 'ECONOMICAS', '8 SEMESTRES');

SELECT * FROM CARRERAS;

COMMIT;

-- ACTUALIZAR UN CAMPO EN EL CUAL TUVIMOS UN ERROR O HAY QUE MODIFICARLOS

UPDATE ALUMNO SET STATUS=1; --ESTA SENTENCIA CAMBIA EL STATUS DEL ALUMNO 
-- PERO EN TODAS LAS FILAS

-- SI QUEREMOS CAMBIAR EL STATUS DE UN SOLO ALUMNO, TENEMOS QUE ESPECIFICAR
-- QUE ALUMNO
UPDATE ALUMNO SET STATUS=0 WHERE ALUMNO_ID=3;

SELECT * FROM ALUMNO;

-- VAMOS A CREAR UNA TABLA QUE NOS FUNCIONE COMO CATALOGO PARA SABER 
-- QUÉ SIGNIFICAN LOS STATUS DE LOS ALUMNOS
CREATE TABLE STATUS_ALUMNOS(
STATUS_ID NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(40)
);

-- HACEMOS INSERCIONES EN ESTA TABLA 
INSERT INTO STATUS_ALUMNOS VALUES (0, 'EL ALUMNO ESTÁ INACTIVO');
INSERT INTO STATUS_ALUMNOS VALUES (1, 'EL ALUMNO ESTÁ ACTIVO');

SELECT * FROM STATUS_ALUMNOS;

-- VAMOS A CREAR UNA RESTRICCION DE LA LLAVE FORANEA, PARA QUE SOLO PODAMOS INSERTAR
-- ALUMNOS CON EL STATUS DEFINIDO EN EL CATALOGO
ALTER TABLE ALUMNO ADD CONSTRAINT FK_STATUS
FOREIGN KEY(STATUS)
REFERENCES STATUS_ALUMNOS (STATUS_ID);

-- SI NOS EQUIVOCAMOS EN EL NOMBRE DE UNA COLUMNA Y QUEREMOS CORREGIRLO
ALTER TABLE STATUS_ALUMNOS RENAME COLUMN 'PALABRA ERRONEA' TO 'PALABRA CORREGIDA'

-- VAMOS A PROBAR INSERTAR UN NUEVO ALUMNO CON UN STATUS QUE NO EXISTE EN NUESTRO CATALOGO
INSERT INTO ALUMNO VALUES
(5, 'PERLA', '02/07/2004', 'FEMENINO', '2DO SEMESTRE', 'VERACRUZ', 1);

SELECT * FROM ALUMNO;

-- CAMBIAR EL NOMBRE DE UNA TABLA, PERO FUNCIONA MEJOR CUANDO APENAS CREAMOS LA TABLA
-- ALTER TABLE 'NOMBRE DE LA TABLA' RENAME 'NUEVO NOMBRE'
ALTER TABLE ALUMNO RENAME TO ALUMNOS;

SELECT * FROM ALUMNOS;

--VAMOS A INSERTAR VALORES EN NUESTRA TABLA RELACIONAL CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
-- DEBEN EXISTIR PRIMERO LOS DATOS EN LAS OTRAS TABLAS, PARA PODER RELACIONARSE AQUI
INSERT INTO CARRERAS_ALUMNOS VALUES(1,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES(2,3,2);
INSERT INTO CARRERAS_ALUMNOS VALUES(3,2,3);

-- CONFIRMO MIS REGISTROS
COMMIT;

SELECT *FROM CARRERAS_ALUMNOS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- EJ. COLUMNA LLAMADA PRESUPUESTO EN LA TABLA CARRERAS
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);
DESCRIBE CARRERAS;

SELECT * FROM CARRERAS;

-- CAMBIAR EL TIPO DE DATO DE UNA COLUMNA SIEMPRE Y CUANDO NO TENGA DATOS
-- EJ. CAMBIAR EL TIPO DE DATO DE LA COLUMNA PRESUPUESTO A NVARCHAR2
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NVARCHAR2(30);

DESCRIBE CARRERAS;

COMMIT;


CREATE TABLE TUTORES(
TUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(100),
CLAVE_TUTOR CHAR(1),
CHECK (CLAVE_TUTOR IN ('A', 'B', 'C', 'D'))
);

DROP TABLE TUTORES;

INSERT INTO TUTORES  VALUES (1, 'JOSE', 'A');
INSERT INTO TUTORES  VALUES (2, 'MARIANA', 'B');
INSERT INTO TUTORES  VALUES (3, 'GUILLERMO', 'C');

DELETE TUTORES;

DESCRIBE TUTORES;

SELECT *FROM TUTORES

CREATE TABLE ALUMNO (
ALUMNO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
APELLIDO NVARCHAR2(30),
GENERO NVARCHAR2(30),
FECHANAC DATE
);

DROP TABLE ALUMNO;

INSERT INTO ALUMNO  VALUES (11, 'PEDRO', 'PEREZ', 'MASCULINO', '12/05/2000');
INSERT INTO ALUMNO  VALUES (12, 'KAREN', 'RODRIGUEZ', 'FEMENINO', '23/10/1999');
INSERT INTO ALUMNO  VALUES (13, 'PABLO', 'GOMEZ', 'MASCULINO', '05/11/2002');

DELETE FROM ALUMNO;
DESCRIBE ALUMNO;

SELECT * FROM ALUMNO;

CREATE TABLE TUTORES_ALUMNOS(
TA_ID NUMBER PRIMARY KEY,
TUTOR_ID NUMBER,
ALUMNO_ID NUMBER,
FOREIGN KEY (TUTOR_ID)REFERENCES TUTORES(TUTOR_ID),
FOREIGN KEY (ALUMNO_ID) REFERENCES ALUMNO(ALUMNO_ID)
);

DROP TABLE TUTORES_ALUMNOS;

INSERT INTO TUTORES_ALUMNOS  VALUES (1, 3, 12); 
INSERT INTO TUTORES_ALUMNOS  VALUES (2, 1, 13); 
INSERT INTO TUTORES_ALUMNOS  VALUES (3, 2, 11); 

DELETE TUTORES_ALUMNOS;
DESCRIBE TUTORES_ALUMNOS;

SELECT *FROM TUTORES_ALUMNOS;

COMMIT;

--------------------------------------------------------
----EJERCICIO BIBLIOTECA
--------------------------------------------------------


-- CREACION DE LA TABLA DE AUTORES
CREATE TABLE AUTORES (
    AUTORES_ID NUMBER PRIMARY KEY,
    NOMBRE NVARCHAR2(255) NOT NULL,
    NACIONALIDAD NVARCHAR2(100)
);

INSERT INTO VALUES (1, 'JOSE', 'MEXICO'),
INSERT INTO VALUES (2, 'MARIA', 'ESPAÑA'),
INSERT INTO VALUES (3, 'PEDRO', 'ITALIA'),
INSERT INTO VALUES (4, 'ANA', 'ARGENTINA'),
INSERT INTO VALUES (5, 'CARLOS', 'BRASIL');

DESCRIBE AUTORES;

SELECT * FROM AUTORES;

-- Creación de la tabla Socios
CREATE TABLE SOCIOS (
    SOCIOS_ID NUMBER PRIMARY KEY,
    NOMBRE NVARCHAR2(255) NOT NULL,
    DIRECCION NVARCHAR2(255),
    TELEFONO NVARCHAR2(20)
);

INSERT INTO SOCIOS VALUES (1, 'PEDRO', 'CALLE PAPALOAPAN 123', '555-1234');
INSERT INTO SOCIOS VALUES (2, 'LAURA', 'AVENIDA ATLIXCO 456', '555-5678');
INSERT INTO SOCIOS VALUES (3, 'JUAN', 'BOULEVARD 5 DE MAYO 789', '555-9012');
INSERT INTO SOCIOS VALUES (4, 'ANITA', 'CUARZO 78', '555-3456');
INSERT INTO SOCIOS VALUES (5, 'JOAQUIN', 'RIO PAPAGAUO 131415', '555-7890');

DESCRIBE SOCIOS;

SELECT * FROM SOCIOS;

CREATE TABLE Libros (
LIBRO_ID NUMBER PRIMARY KEY,
TITULO NVARCHAR2(255) NOT NULL,
AUTORES_ID NUMBER,
CANTIDAD_COPIAS NUMBER 
CHECK (CANTIDAD_COPIAS >= 0),
CONSTRAINT FK_LIBROS_AUTORES FOREIGN KEY (AUTORES_ID) REFERENCES AUTORES(AUTORES_ID)
);


-- Agregar datos a la tabla Libros
INSERT INTO Libros VALUES (1, 'EL PRINCIPITO', 1, 5),
INSERT INTO Libros VALUES (2, '1984', 2, 3),
INSERT INTO Libros VALUES (3, 'DON QUIJOTE', 3, 4),
INSERT INTO Libros VALUES (4, 'ELON MUSK', 4, 2),
INSERT INTO Libros VALUES (5, 'CIEN AÑOS DE SOLEDAD', 5, 5);

DESCRIBE LIBROS;

SELECT * FROM LIBROS;

-- Creación de la tabla Prestamos
CREATE TABLE PRESTAMOS (
PRESTAMOS_ID NUMBER PRIMARY KEY,
LIBRO_ID NUMBER,
SOCIOS_ID NUMBER,
FECHAPREST DATE,
FECHADEV DATE,
CONSTRAINT FK_PRESTAMOS_LIBRO FOREIGN KEY (LIBRO_ID) REFERENCES LIBRO(LIBRO_ID),
CONSTRAINT FK_PRESTAMOS_SOCIOS FOREIGN KEY (SOCIOS_ID) REFERENCES SOCIOS(SOCIOS_ID)
);

DESCRIBE PRESTAMOS;

SELECT * FROM PRESTAMOS;

-- Agregar datos a la tabla Prestamos
INSERT INTO PRESTAMOS VALUES (1, 1, 1, TO_DATE('01/06/2024', 'DD/MM/YYYY'), TO_DATE('15/06/2024', 'DD/MM/YYYY'));
INSERT INTO PRESTAMOS VALUES (2, 2, 2, TO_DATE('02/06/2024', 'DD/MM/YYYY'), TO_DATE('16/06/2024', 'DD/MM/YYYY'));
INSERT INTO PRESTAMOS VALUES (3, 3, 3, TO_DATE('03/06/2024', 'DD/MM/YYYY'), TO_DATE('17/06/2024', 'DD/MM/YYYY'));
INSERT INTO PRESTAMOS VALUES (4, 4, 4, TO_DATE('04/06/2024', 'DD/MM/YYYY'), TO_DATE('18/06/2024', 'DD/MM/YYYY'));
INSERT INTO PRESTAMOS VALUES (5, 5, 5, TO_DATE('05/06/2024', 'DD/MM/YYYY'), TO_DATE('19/06/2024', 'DD/MM/YYYY'));

COMMIT;


-----------------------------------------------------------------------------
/* SECUENCIAS Y DISPARADORES
CREAR SECUENCIAS
LAS SECUENCIAS SON OBJETOS QUE NOS PERMITEN GENERAR VALORES DE
NUMEROS ENTEROS DE FORMA CONSECUTIVA Y PUEDEN SER CON
UN INCREMENTO DETERMINADO (DE 1 EN 1, DE 2 EN 2, ETC)
SE UTILIZAN PARA GENERAR LLAVES PRIMARIAS Y ASI ASEGURARNOS
QUE LOS VALORES NO SE REPITAN
*/

 --EJ. DE SINTAXIS PARA CREAR UNA SECUENCIA PARA UNA TABLA CUANDO
 -- YA TENEMOS REGISTROS ALMACENADOS
 SELECT * FROM ALUMNOS;
 
 CREATE SEQUENCE ALUMNOS_SEQ -- SECUENCIA Y SU NOMBRE
 START WITH 6 -- EL VALOR EN EL QUE INICIA
 INCREMENT BY 1 -- EL INCREMENTO DE LA SECUENCIA 
 MAXVALUE 999 -- EL VALOR MAXIMO AL QUE LLEGA SU CONTEO
 MINVALUE 1 -- EL VALOR MINIMO DE LA SECUENCIA
 NOCYCLE; -- INDICAMOS SI SE CILA (CYCLE) O NO (NOCYCLE)
 
 /* VAMOS A CREAR UN PROCEDIMIENTO CONOCIDO COMO DISPARADOR
 O TIGGER. SON UN TIPO DE PROCEDIMIENTO ALMACENADO QUE NOS PERMITE
 DESENCADENAR UN EVENTO. EN ESTE CASO LO UTILIZAREMOS PARA INSERTAR
 LOS VALORES DE LOS TIPOS IDS QUE SE TOMARAN DE LA SECUENCIA
 */
 
 --EJ. DE SINTAXIS PARA UN TIGGER PARA LA TABLA ALUMNOS
 CREATE OR REPLACE TRIGGER INSERT_ALUMNOS -- NOMBRE DEL TRIGGER
 BEFORE INSERT ON ALUMNOS FOR EACH ROW BEGIN -- DONDE ACTUA(TABLA)
 SELECT ALUMNOS_SEQ.NEXTVAL INTO:NEW.ALUMNO_ID FROM DUAL;--(QUE HACE)
 END;
 
 -- EJEMPLO DE COMO INSERTAR VALORES AHORA EN NUESTRA TABLA
 INSERT INTO ALUMNOS VALUES
 (1, 'DANIEL', '26/06/2000', 'MASCULINO', '8o SEMESTRE', 'TOLUCA', 1);
 
 SELECT * FROM ALUMNOS;
 
 -- OTRA FORMA ED INSERTAR UN REGISTRO UNA VEZ QUE TENEMOS UN DISPARADOR
 --SERIA OMITIENDO EL ID
 INSERT INTO ALUMNOS (NOMBRE,FECHANAC,GENERO,GRADO,CIUDAD,STATUS) VALUES
 ('MIGUEL', '26/07/2000', 'MASCULINO', '8o SEMESTRE','CUERNAVACA', 1);
 
 -- VAMOS A CREAR UNA TABLA VACIA PARA PODER CREAR UNA SECUENCIA CON VALORES
 -- POR DEFECTO
 CREATE TABLE CLIENTES(
 CLIENTE_ID NUMBER PRIMARY KEY,
 NOMBRE NVARCHAR2(15),
 DIRECCION NVARCHAR2(40),
 INE NVARCHAR2(10),
 TELEFONO NVARCHAR2(10)
 );

--EJ. CREAR UNA SECUENCIA CON VALORES POR DEFECTO
CREATE SEQUENCE CLIENTES_SEQ;

--CREAMOS SU DISPARADOR
CREATE OR REPLACE TRIGGER INSERT_CLIENTES --NOMBRE DEL TRIGGER
 BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN -- DONDE ACTUA(TABLA)
 SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.CLIENTE_ID FROM DUAL;--(QUE HACE)
 END;
 
 --EJ. INSERTAR 2 CLIENTES
 INSERT INTO CLIENTES VALUES (1,'MANUEL','TAMPICO','1234567890', '5566779911');
 INSERT INTO CLIENTES VALUES (1,'FRANCISCO','NVO LAREDO','1234567899', '5566779910');

SELECT * FROM CLIENTES;

COMMIT;

-- ACTUALIZAR DATOS DE UN REGISTRO 

SELECT * FROM ALUMNOS;

UPDATE ALUMNOS SET GRADO='7o SEMESTRE', CIUDAD='CUAUTLA' WHERE ALUMNO_ID=7;

------ SENTENCIA PARA ELIMINAR REGISTROS DE UNA TABLA

DELETE FROM ALUMNOS WHERE ALUMNO_ID=7; -- NO PUEDO BORRAR UN REGISTRO DE UN ALUMNO
-- QUE TIENE RELACIONCON UNA CARRERA

-- PERO SI PUEDO BORRAR UN ALUMNO QUE NO ESTE RELACIONADO EN LA TABLA CARRERAS_ALUMNOS
DELETE FROM ALUMNOS WHERE ALUMNO_ID=6

SELECT * FROM ALUMNOS;

-- QUE PASA SI TENEMOS UNA TABLA QUE NO TIENE RELACIONES, PERO QUE NO INDICAMOS EL ID
--A ELIMINAR
DELETE FROM CLIENTES; -- ESTO ELIMINA A TODOS LOS CLIENTES, SI NO INDICÓ EL ID

SELECT * FROM CLIENTES;

--PODEMOS UTILIZAR UN ROLLBACK PARA IR AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

-- CONSULTAR CIERTAS COLUMNAS DE UNA TABLA
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS;

--CONSULTAR DATOS DE UNA TABLA DE ACUERDO A UNA CONDICION 
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA';

--CONSULTAR DATOS DE UNA TABLA DE ACUERDO A MAS DE UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA' AND NOMBRE='CARMEN';

-- VAMOS A MODIFICAR NUEVAMENTE EL DATO DE NUESTRA TABLA CARRERAS EN LA COLUMNA 
-- PRESUPUESTO
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NUMBER;

SELECT * FROM CARRERAS;

--CONSULTAR DATOS QUE SE ENCUENTREN ENTRE UN RANGO ESPECIFICO DE VALORES
SELECT NOMBRE, PRESUPUESTO FROM CARRERAS WHERE PRESUPUESTO BETWEEN 20000 AND 30000;

--CONSULTAR INFORMACION CON VALORES DE CARACTERES SIMILARES
SELECT *FROM ALUMNOS WHERE NOMBRE LIKE 'C%';

SELECT *FROM ALUMNOS WHERE NOMBRE LIKE '%A';

--FUNCIONES DE AGREGACIÓN
--CONSULTAR EL VALOR MÁXIMO DE UNA COLUMNA EN UNA TABLA
SELECT MAX(PRESUPUESTO)FROM CARRERAS;

--CONSULTAR EL VALOR MINIMO DE UNA COLUMNA EN UNA TABLA
SELECT MIN(PRESUPUESTO) FROM CARRERAS;

--CONSULTAR EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG(PRESUPUESTO) FROM CARRERAS;

--CONSULTAR LA SUMA DE LOS VALORES DE UNA COLUMNA
SELECT SUM(PRESUPUESTO) FROM CARRERAS;

SELECT SUM(CANTIDAD_COPIAS) FROM LIBROS;

-- REALIZAR EL CONTEO DEL REGISTRO DE UNA TABLA

SELECT COUNT(*) FROM ALUMNOS;

-- FUNCION GROUP BY
SELECT COUNT(*), GENERO FROM ALUMNOS GROUP BY GENERO;

-- ORDENAR LOS REGISTROS DE ACUERDO A UN CRITERIO
SELECT * FROM ALUMNOS;

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID;--EN UN ORDEN ASCENDENTE

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID DESC;

SELECT * FROM ALUMNOS ORDER BY NOMBRE;-- EN ORDEN ALFABETICO

SELECT * FROM ALUMNOS ORDER BY NOMBRE DESC;--FORMA CONTRARIA

-- EJ. DE UNA CONSULTA ANIDADA
--(CONSULTA DENTRO DE OTRA)
SELECT MAX(PRESUPUESTO) FROM CARRERAS; -- ESTO ME DEVUELVE EL VALOR MAXIMO DE PRESUPUESTO

-- CONSULTA LA CARRERA CON EL PRESUPUESTO MAS  ALTO
SELECT * FROM CARRERAS WHERE PRESUPUESTO = (SELECT MAX(PRESUPUESTO) FROM CARRERAS);

/*ACTIVIDAD
VAN A CREAR UNA SECUENCIA PARA CADA TABLA DE LA BASE DE DATOS DE LA BIBLIOTECA
Y UNA VEZ TENGAN LAS SECUENCIAS, CREAN EL DISPARADOR PARA CADA SECUENCIA
*/

-- Creación de secuencia para AutoreS
CREATE SEQUENCE seq_autores_id
START WITH     6
INCREMENT BY   1
MAXVALUE      999
MINVALUE      1
NOCYCLE;

-- Creación de secuencia para Socios
CREATE SEQUENCE seq_socios_id
START WITH     6
INCREMENT BY   1
MAXVALUE      999
MINVALUE      1
NOCYCLE;

-- Creación de secuencia para Libros
CREATE SEQUENCE seq_libros_id
START WITH     6
INCREMENT BY   1
MAXVALUE      999
MINVALUE      1
NOCYCLE;

-- Creación de secuencia para Prestamos
CREATE SEQUENCE PRESTAMOS_SEQ
START WITH     6
INCREMENT BY   1
MAXVALUE      999
MINVALUE      1
NOCYCLE;

-- DISPARADOR PARA AUTORES
CREATE OR REPLACE TRIGGER trg_autores_bef_insert
BEFORE INSERT ON Autores FOR EACH ROW BEGIN
SELECT seq_autores_id.NEXTVAL INTO :NEW.autores_id FROM dual;
END;

-- Disparador para Socios
CREATE OR REPLACE TRIGGER trg_socios_bef_insert
BEFORE INSERT ON Socios FOR EACH ROW BEGIN
SELECT seq_socios_id.NEXTVAL INTO :NEW.socios_id FROM dual;
END;

-- Disparador para Libros
CREATE OR REPLACE TRIGGER trg_libros_bef_insert
BEFORE INSERT ON Libros FOR EACH ROW BEGIN
SELECT seq_libros_id.NEXTVAL INTO :NEW.libros_id FROM dual;
END;

-- Disparador para Prestamos
CREATE OR REPLACE TRIGGER INSERT_PRESTAMOS
BEFORE INSERT ON PRESTAMOS FOR EACH ROW BEGIN
SELECT PRESTAMOS_SEQ.NEXTVAL INTO : NEW.PRESTAMOS_ID FROM DUAL;
END;

COMMIT;

--CONSULTA JOINS--
--NOS PERMITEN UNIR DOS O MÁS TABLAS EN UN CAMPO QUE COMPARTEN EN COMÚN
--PARA PODER VER LA INFORMACIÓN DE LAS FILAS QUE COMPARTEN

--INNER JOIN 
--UNE UNA TABLA "A" CON UNA TABLA "B" Y MUESTRA LAS FILAS COINCIDENTES

SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

SELECT * FROM ALUMNOS;

--FULL OUTER JOIN
--MUESTRA TODAS LAS FILAS TANTO DE LA TABLA "A" COMO DE LA TABLA "B"
SELECT * FROM ALUMNOS
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

--LEFT JOIN--MUESTRA TODAS LAS FILAS DE LA TABLA "A" Y SOLO LO COINCIDENTE CON LA "B"
--RIGHT JOIN-- MUESTRA TODAS LAS FILAS DE LA TABLA "B" Y SOLO LO COINCIDENTE CON LA "A"
SELECT * FROM ALUMNOS
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

-- PODEMOS UNIR MÁS TABLAS, UNA TERCERA, EN ESTE CASO CARRERAS
SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

-- PODEMOS SELECCIONAR TAMBIEN SOLO DETERMINADA INFO A MOSTRAR
SELECT ALUMNOS.ALUMNO_ID, ALUMNOS.NOMBRE, CARRERAS.NOMBRE, CARRERAS.AREA FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

--IDENTIFICAR NUESTRAS TABLAS POR ALIAS

SELECT * FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

SELECT A.ALUMNO_ID, A.NOMBRE, C.NOMBRE , C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

SELECT A.ALUMNO_ID AS MATRICULA, A.NOMBRE AS ALUMNO, C.NOMBRE AS CARRERA , C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

-- ACTIVIDAD
/* REALIZAR UN JOIN, EL QUE GUSTEN PARA QUE MUESTRE EL NOMBRE DEL SOCIO,
NOMBRE DEL LIBRO Y FECHA DE DEVOLUCION DEL LIBRO*/

SELECT S.NOMBRE AS NOMBRE_SOCIOS, L.TITULO AS NOMBRE_LIBROS, P.FECHADEV AS FECHA_DEVOLUCION FROM PRESTAMOS P
INNER JOIN SOCIOS S 
ON P.SOCIOS_ID = S.SOCIOS_ID
INNER JOIN LIBROS L 
ON P.LIBROS_ID = L.LIBROS_ID;

SELECT S.NOMBRE, L.TITULO, FECHADEV FROM PRESTAMOS P
INNER JOIN SOCIOS S
ON P.SOCIOS_ID = S.SOCIOS_ID
INNER JOIN LIBROS L
ON P.LIBROS_ID = L.LIBROS_ID;

COMMIT;




