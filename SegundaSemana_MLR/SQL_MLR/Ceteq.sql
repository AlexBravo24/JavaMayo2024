-- COMENTARIOS DE UNA SOLA LINEA

/* Comentarios, esto sigue siendo un comentario
de
multiples
lineas
*/

-- SQL (STRUCTURED QUERY LANGUAGE, O LENGUAJE DE CONSULTA ESTRUCTURADO)
-- ¿Qué es una base de datos?
-- Conjunto de datos relacionados entre sí y que son almacenados en tablas

-- DDL (Data Definition Language, o Lenguaje de definicion de datos)
-- Son comandos que se utilizan para crear o modificar la estructura u objetos
-- de base de datos (tablas, procedimientos, secuencias, disparadores)

-- La estructura de una tabla de una base de datos relacional es
-- la siguiente:
-- Toda tabla debe llevar por lo menos una llave primaria (PRIMARY KEY)
-- Y regularmente este valor es numérico entero
-- Pueden llevar llave foranea (FOREIGN KEY), lo cual es un ID o llave primaria
-- proveniente de otra tabla
-- Columnas con los diferentes tipos de dato
-- Vamos a enfocarnos en Oracle en 3 tipos de dato importantes:
-- NUMBER - Admite datos numéricos enteros y decimales
-- NVARCHAR2 - Este tipo de dato admite caracteres alfanumericos y especiales
-- ademas de que tine una mejor gestion de memoria
-- (Ej. Quiero almacenar 20 caracteres indico NVARCHAR2(20))
-- DATE - Admite almacenar fecha y hora

-- Vamos a iniciar conociendo las sentencias para crear nuestras tablas
-- y su estructura

-- EJ. VAMOS A CREAR UNA TABLA PARA GUARDAR INFORMACION DE ALUMNOS
-- ALUMNOS
-- ALUMNOS_ID
-- NOMBRE
-- FECHANAC
-- GENERO
-- GRADO
-- CIUDAD
-- STATUS 8SI ESTA INSCRITO O NO)

/*
SINTAXIS BASICA PARA CREACION DE TABLAS

CREATE TABLE nombreTabla(
nombreColumna TIPODATO PRIMARY KEY,
columna2 TIPODATO,
columna3 TIPODATO,
);
*/

CREATE TABLE ALUMNOS(
ALUMNO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(20),
GRADO NVARCHAR2(30),
CIUDAD NVARCHAR2(30),
STATUS NUMBER
);

-- COMANDO PARA ELIMINAR TABLAS CON TODO Y DATOS SI ES QUE LOS TUVIERA
DROP TABLE ALUMNOS;

-- COMANDO PARA VER LA ESTRUCTURA DE UNA TABLA CREADA
DESCRIBE ALUMNOS;

-- VAMOS A CREAR OTRA TABLA PARA ALMACENAR LA INFO DE LAS CARRERAS
CREATE TABLE CARRERAS(
CARRERA_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NVARCHAR2(30)
);

-- AGREGAR CAMPO PRESUPUESTO
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER;

INSERT INTO CARRERAS VALUES (1,'NUTRICION','BIOLOGICAS','8 SEMESTRES',20000.99);
INSERT INTO CARRERAS VALUES (2,'ING. EN SISTEMAS','EXACTAS','8 SEMESTRES',40000);
INSERT INTO CARRERAS VALUES (3,'ADMINISTRACION DE EMPRESAS','ECONOMICAS','8 SEMESTRES',20000);
COMMIT;

-- VAMOS A CREAR UNA TABLA PARA RELACIONAR LAS CARRERAS Y LOS ALUMNOS INSCRITOS
-- PARA QUE TENGAN LA POSIBILIDAD DE TENER MAS D UNA CARRERA (CARDINALIDADOS
-- UNO A MUCHOS  MUCHOS A UNO M:1)

CREATE TABLE CARRERAS_ALUMNOS(
CA_ID NUMBER PRIMARY KEY,
CARRERA_ID NUMBER,
ALUMNO_ID NUMBER
);

DESCRIBE CARRERAS_ALUMNOS;

INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,7);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,3);
COMMIT;

-- RESTRICCIONES
-- VAMOS A CREAR RESTRICCIONES EN NUESTRAS TABLAS
-- EJEMPLO DE RESTRICCION DE TIPO CHECK (SE VA A VERIFICAR O VALIDAR
-- QUE LA INFORMACION QUE SE INGRESE EN DICHAR COLUMNA, SEA LA QUE DETERMINEMOS)
-- EJ. QUE EN LA COLUMNA GENERO DE LA TABLA ALUMNO SOLO PUEDAN INGRESAR
-- 'MASCULINO' O 'FEMENINO'

ALTER TABLE ALUMNOS ADD CONSTRAINT CHK_GENERO
CHECK (GENERO IN ( 'MASCULINO', 'FEMENINO'));

-- COMANDO PARA ELIMINAR UNA RESTRICCION DE UNA TABLA
ALTER TABLE ALUMNO DROP CONSTRAINT CHK_GENERO;

-- RESTRICCION DE TIPO UNIQUE
-- NOS PERMITEN CREAR UNA RESTRICCION PARA VALORES UNICOS,CUANDO ESTOS
-- NO SON LLAVES PRIMARIAS
-- EJ. NO SE PUEDEN O DEBEN REPETIR LOS NOMBRES DE LAS CARRERAS

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);


-- CREACIÖN DE LLAVES FORANEAS
-- ESTO TAMBIÉN ES UNA RESTRICCION, PORQUE PRIMERO DEBEN EXISTIR LOS VALORES
-- DE LOS IDS O LLAVES PRIMARIAS EN SUS RESPECTIVAS TABLAS
-- PARA PODER RELACIONARSE 
-- CUANDO UNA TABLA LLEVA UNA LLAVE FORANEA, SE LE CONOCE COMO
-- ENTIDAD DEBIL.
-- CUANDO UNA TABLA NO LLEVA LLAVES FORANEAS, ES DECIR, SUS DATOS NO DEPENDEN
-- DE OTRA TABLA, SE LE CONOCE COMO ENTIDAD FUERTE

-- CREAR LA RESTRICCION DE LLAVE FORANEA PARA LA TABLA CARRERAS_ALUMNOS
-- PARA RECIBIR EL ID DE LA CARRERA (CARRERA ID)
/*ALTER TABLE nombredetabla ADD CONSTRAINT nombre restriccion
FOREIGN KEY (Nombre de la columna donde recibimos el valor)
REFERENCES nombreTab1a (columna de la tabla de donde viene el valor) ;
*/

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_CARRERA_ID
FOREIGN KEY (CARRERA_ID)
REFERENCES CARRERAS (CARRERA_ID);

-- CREAR LLAVE FORANEA PARA LA COLUMNA ALUMNO_ID EN LA TABLA CARRERAS_ALUMNOS
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ALUMNO_ID
FOREIGN KEY (ALUMNO_ID) -- EN QUE COLUMNA RECIBIMOS EL DATO
REFERENCES ALUMNOS (ALUMNO_ID); -- DE QUE TABLA Y COLUMNA PROVIENE ESE DATO

-- SENTENCIAS DML (Data Manipulation Language)
-- de datos
-- CRUD, Create, Read, Update, Delete

-- Lenguaje de manipulacion
-- INSERT - Insertar o crear registros en nuestras tablas
-- EJ. INSERTAR VALORES EN LA TABLA ALUMNO
DESCRIBE ALUMNOS;

-- VERIFICAMOS PRIMERO ANTES DE INSERTAR FECHAS, CUAL ES FORMATO DE FECHA DE SISTEMA 
SELECT SYSDATE FROM DUAL;

DELETE FROM ALUMNOS;
INSERT INTO ALUMNOS VALUES (1, 'ANDRES', '26/03/2021', 'MASCULINO', '1ER SEMESTRE', 'CDMX', 1);
INSERT INTO ALUMNOS VALUES (7, 'ALEX', '14/04/1994', 'MASCULINO', '1ER SEMESTRE', 'VERACRUZ', 1);
INSERT INTO ALUMNOS VALUES (2, 'GLUZ', '20/04/2023', 'FEMENINO' , '2DO SEMESTRE' , 'PUEBLA', 1);
INSERT INTO ALUMNOS VALUES (3, 'CARMEN', '02/07/2002', 'FEMENINO', '3ER SEMESTRE', 'XALAPA', 1);
INSERT INTO ALUMNOS VALUES (4, 'ALEXI', '17/07/2013', 'FEMENINO', '6o SEMESTRE', 'TAMPICO', 1);
INSERT INTO ALUMNOS VALUES (5, 'LAIHO', '13/07/2015', 'FEMENINO', '4o SEMESTRE', 'CUERNAVACA', 1);
INSERT INTO ALUMNOS VALUES (6, 'DIMME BAG', '15/07/2010', 'MASCULINO', '3ER SEMESTRE', 'ACAPULCO', 1);
INSERT INTO ALUMNOS VALUES (7, 'JINGER', '14/02/2003', 'FEMENINO', '7o SEMESTRE', 'CAMPECHE', 1);
COMMIT;
SELECT * FROM ALUMNOS;

-- CONSULTAR LA INFO DE NUESTRAS TABLAS
-- CONSULTA GENERAL
SELECT * FROM ALUMNOS;

-- PARA QUE LOS REGISTROS PERMANEZCAN EN LA BASE DE DATOS, HAY QUE
-- CONFIRMARLOS
-- ESTO ES UNICAMENTE PARA REGISTROS (DML)
COMMIT;


/* ----------------------------------------------------------------------------------*/
-- EJERCICIO #1
/* ----------------------------------------------------------------------------------*/
-- EJERCICIO BD ALUMNOS

-- CREAR UNA TABLA LLAMADA TUTORES
-- LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
-- TUTOR_ID (PRIMARY KEY)
-- NOMBRE
-- CLAVE DEL TUTOR (QUE ESTA CLAVE SOLO PUEDAN SER LAS LETRAS A, B, C D)
-- INSERTAN POR LO MENOS 3 REGISTROS DE TUTORES

-- CREAR UNA TABLA RELACIONAL LLAMADA TUTORES_ALUMNOS
-- DEBE LLEVAR SU PROPIA COLUMNA CON PRIMARY KEY (ID_TA)
-- ID_TUTOR
-- ID_ALUMNO
-- CREAN LAS RESPECTIVAS LLAVES FORANEAS PARA RECIBIR LA INFO
-- PROVENIENTE DE ALUMNO_ID Y TUTOR_ID
-- INSERTAN 3 REGISTROS PARE RELACIONAR QUE TUTOR
-- LE DA ASESORÍA/CLASES A QUÉ ALUMNO

DROP TABLE TUTORES;
-- EJEMPLO DE LA CREACION DE LA TABLA TUTORES, CON LAS RESTRICCIONES CREADAS
-- DESDE UN INICIO (CHECK)

CREATE TABLE TUTORES(
TUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
CLAVE NVARCHAR2(1),
CONSTRAINT CHK_CLAVE_TUTOR CHECK (CLAVE IN('A','B','C','D'))
);

INSERT INTO TUTORES VALUES (1,'JINGER','A');
INSERT INTO TUTORES VALUES (2,'BLOSON','B');
INSERT INTO TUTORES VALUES (3,'ALISSA','C');
INSERT INTO TUTORES VALUES (4,'WHITE','D');

SELECT * FROM TUTORES;

-- EJEMPLO DE CREAR LA TABLA TUTORES_ALUMNOS CON SUS RESTRICCIONES DE LLAVES FORANEAS
-- CREADAS AL INICIO DE LA TABLA

CREATE TABLE TUTORES_ALUMNOS(
TA_ID NUMBER PRIMARY KEY,
TUTOR_ID NUMBER,
ALUMNO_ID NUMBER,
CONSTRAINT FK_TUTOR_ID_TA FOREIGN KEY (TUTOR_ID) REFERENCES TUTORES (TUTOR_ID),
CONSTRAINT FK_ALUMNO_ID_TA FOREIGN KEY (ALUMNO_ID) REFERENCES ALUMNOS (ALUMNO_ID)
);

-- REGISTROS DE TUTORES Y ALUMNOS 
INSERT INTO TUTORES_ALUMNOS VALUES (1, 3, 7);
INSERT INTO TUTORES_ALUMNOS VALUES (2, 4, 2);
INSERT INTO TUTORES_ALUMNOS VALUES (3, 1, 3);
SELECT * FROM TUTORES_ALUMNOS;

/* ----------------------------------------------------------------------------------*/

-- SECUENCIAS Y DISPARADORES
-- CREAR SECUENCIAS
-- LAS SECUENCIAS SON OBJETOS QUE NOS PERMITEN GENERAR VALORES
-- NUMEROS ENTEROS DE FORMA CONSECUTIVA Y PUEDEN SER CON
-- UN INCREMENTO DETERMINADO (DE 1 EN 1, DE 2 EN 2, ETC)
-- SE UTILIZAN PARA GENERAR LLAVES PRIMARIAS Y ASI ASEGURARNOS
-- DE QUE LOS VALORES NO SE REPITAN
-- EJ. DE SINTAXIS PARA CREAR UNA SECUENCIA PARA UNA TABLA CUANDO
-- YA TENEMOS REGISTROS ALMACENADOS
SELECT * FROM ALUMNOS;

CREATE SEQUENCE ALUMNOS_SEQ -- SECUENCIA Y SU NOMBRE
START WITH 6 -- EL VALOR EN EL QUE INICIA
INCREMENT BY 1 -- EL INCREMENTO DE LA SECUENCIA

MAXVALUE 999 -- EL VALOR MAXIMO AL QUE LLEGA SU CONTEO
MINVALUE 1 -- EL VALOR MfNIMO DE LA SECUENCIA
NOCYCLE; -- INDICAMOS Sl SE CICLA (CYCLE) O NO (NOCYCLE)


-- VAMOS A CREAR UN PROCEDIMIENTO CONOCIDO COMO DISPARADOR
-- O TRIGGER. SON UN TIPO DE PROCEDIMIENTO ALMACENADO QUE NOS PERMITE
-- DESENCADENAR UN EVENTO. EN ESTE CASO LO UTILIZAREMOS PARA INSERTAR
-- LOS VALORES DE LOS IDS QUE SE TOMARAN DE LA SECUENCIAI

-- EJ. DE SINTAXIS PARA UN TRIGGER PARA LA TABLA ALUMNOS
CREATE OR REPLACE TRIGGER INSERT_ALUMNOS -- NOMBRE DLE TRIGGER
BEFORE INSERT ON ALUMNOS FOR EACH ROW BEGIN -- DONDE ACTUA (TABLA)
SELECT ALUMNOS_SEQ.NEXTVAL INTO:NEW.ALUMNO_ID FROM DUAL; -- (QUE HACE)
END;

-- BORRAR TRIGERS Y SEQUENCE
DROP SEQUENCE ALUMNOS_SEQ;
DROP TRIGGER INSERT_ALUMNOS;

-- EJEMPLO DE COMO INSERTAR VALORES AHORA EN NUESTRA TABLA
INSERT INTO ALUMNOS VALUES (1, 'SLASH', '15/08/2000', 'MASCULINO', '8o GRADO', 'TOLUCA', 1);

SELECT * FROM ALUMNOS;

-- OTRA FORMA DE INSERTAR UN REGISTRO UNA VEZ QUE TENEMOS UN DISPARADOR
-- SERIA OMITIENDO EL ID, INDICANDO LOS CAMPOS Y VALORES A INSERTAR
INSERT INTO ALUMNOS (NOMBRE,FECHANAC,GENERO,GRADO,CIUDAD,ESTATUS) VALUES 
('SLASH', '15/08/2000', 'MASCULINO', '8o GRADO', 'TOLUCA', 1);

-- VAMOS A CREAR UNA TABLA VACIA PARA PODER CREAR UNA SECUENCIA CON VALORES
-- POR DEFECTO
CREATE TABLE CLIENTES (
CLIENTE_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(15),
DIRECCION NVARCHAR2(40),
INE NVARCHAR2(10),
TELEFONO NVARCHAR2(10)
);

-- EJ. CREAR UNA SECUENCIA CON VALORES POR DEFECTO
CREATE SEQUENCE CLIENTES_SEQ;

-- CREAMOS SU DISPARADOR
CREATE OR REPLACE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN 
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.CLIENTE_ID FROM DUAL;
END;

-- EJ. INSERTAR DOS CLIENTES
INSERT INTO CLIENTES VALUES (1, 'DANYA','CANCUN','1234567890','1111222233');
INSERT INTO CLIENTES VALUES (1, 'CATS','MONTERREY','9087478','8877665544');
INSERT INTO CLIENTES VALUES (1, 'SHARON','ACAPULCO','6633885599','7733449977');
COMMIT;
SELECT * FROM CLIENTES;

-- ACTUALIZAR REGISTROS
UPDATE ALUMNOS SET GRADO='7o SEMESTRE', CIUDAD='CUAUTLA' WHERE ALUMNO_ID=7;
SELECT * FROM ALUMNOS;

-- SENTENCIA PARA ELIMINAR REGISTROS DE UNA TABLA
DELETE FROM ALUMNOS WHERE ALUMNO_ID=1;

-- QUE PASA SI TENEMOS UNA TABLA QUE NO TIENE RELACIONES, PERO QUE NO INDICAMOS EL ID
-- A ELIMINAR
DELETE FROM CLIENTES; -- ESTO ELIMINA MIS CLIENTES, SI NO INDICO EL ID

-- PODEMOS UTILIZAR UN ROLLBACK PARA IR AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;
SELECT * FROM CLIENTES;

-- CONSULTAR CIERTAS COLUMNAS DE UNA TABLA
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS;

-- CONSULTAR DATOS DE UNA TABLA DE ACUERDO A UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA';

-- CONSULTAR DATOS DE UNA TABLA DE ACUERDO A MÁS DE UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA' AND NOMBRE='CLAUDIA';

-- VAMOS A MODIFICAR NUEVAMENTE EL DATO DE NUESTRA TABLA CARRERAS EN LA COLUMNA
-- PRESUPUESTO
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NUMBER;

SELECT * FROM CARRERAS;

-- CONSULTAR DATOS QUE SE ENCUENTREN ENTRE UN RANGO ESPECIFICO DE VALORES
SELECT NOMBRE, PRESUPUESTO FROM CARRERAS WHERE PRESUPUESTO BETWEEN 20000 AND 30000;

-- CONSULTAR INFORMACION CON VALORES DE CARACTERES SIMILARES
SELECT * FROM ALUMNOS WHERE NOMBRE LIKE 'C%';

SELECT * FROM ALUMNOS WHERE NOMBRE LIKE '%A';

-- FUNCIONES DE AGREGACIÓN
-- CONSULTAR EL VALOR MÁXIMO DE UNA COLUMNA EN UNA TABLA
SELECT MAX(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL VALOR MÍNIMO DE UNA COLUMNA EN UNA TABLA
SELECT MIN(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR LA SUMA DE LOS VALORES DE UNA COLUMNA
SELECT SUM (PRESUPUESTO) FROM CARRERAS;

-- REALIZAR EL CONTEO DE REGISTROS DE UNA TABLA
SELECT COUNT (*) FROM ALUMNOS;

-- FUNCION GROUP BY
SELECT COUNT (*), GENERO FROM ALUMNOS GROUP BY GENERO;

-- ORDENAR LOS REGISTROS DE ACUERDO A UN CRITERIO
SELECT * FROM ALUMNOS;
SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID; -- EN ORDEN ASCENDENTE
SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID DESC; -- EN ORDEN DESCENDENTE
SELECT * FROM ALUMNOS ORDER BY NOMBRE; -- EN ORDEN ASCENDENTE
COMMIT;

-- EJ. DE UNA CONSULTA ANIDADA
-- 8CONSULTA DENTRO DE OTRA)
SELECT MAX (PRESUPUESTO) FROM CARRERAS; -- ESTO ME DEVUELVE EL VALOR MAXIMO DE PRESUPUESTO

-- CONSULTAR LA CARRERA CON EL PRESUPUESTO MAS ALTO
SELECT * FROM CARRERAS WHERE PRESUPUESTO = (SELECT MAX (PRESUPUESTO) FROM CARRERAS);
COMMIT;

/* ----------------------------------------------------------------------------------*/
-- ACTIVIDAD --
/* ----------------------------------------------------------------------------------*/

-- CREAR UNA SECUENCIA PARA CADA TABLA DE LA BASE DE DATOS DE LA BIBLIOTECA
-- Y UNA VEZ TENGAN LA SECUENCIA, CREAN EL DISPARADOR PARA CADA SECUENCIA Y CADA TABLA

-- SECUENCIA Y TRIGGER PARA AUTORES --
CREATE SEQUENCE AUTORES_SEQ 
START WITH 10 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE OR REPLACE TRIGGER INSERT_AUTORES
BEFORE INSERT ON AUTORES FOR EACH ROW BEGIN
SELECT AUTORES_SEQ.NEXTVAL INTO:NEW.AUTOR_ID FROM DUAL;
END;

INSERT INTO AUTORES VALUES (1,'LOVECRAFT','ESTADOS UNIDOS');
INSERT INTO AUTORES VALUES (1,'Agatha Christie','INGLATERRA');

SELECT * FROM AUTORES;

-- SECUENCIA Y TRIGGER PARA CLIENTES --
CREATE SEQUENCE CLIENTES_SEQ 
START WITH 15 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE OR REPLACE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.CLIENTE_ID FROM DUAL;
END;

INSERT INTO CLIENTES VALUES (1,'MISAEL','MORELOS','INEEEEEE',88776655);
INSERT INTO CLIENTES VALUES (1,'CINTHYA','MORELIA','XXXSSSDD',55664433);

SELECT * FROM CLIENTES;

-- SECUENCIA Y TRIGGER PARA SOCIOS --
CREATE SEQUENCE SOCIOS_SEQ 
START WITH 20 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE OR REPLACE TRIGGER INSERT_SOCIOS
BEFORE INSERT ON SOCIOS FOR EACH ROW BEGIN
SELECT SOCIOS_SEQ.NEXTVAL INTO:NEW.SOCIO_ID FROM DUAL;
END;

INSERT INTO SOCIOS VALUES (1,'MISAEL','MORELOS',87654);
INSERT INTO SOCIOS VALUES (1,'DANTE','CANCUN',12345);

SELECT * FROM SOCIOS;

-- CONSULTAS CON JOINS --
-- NOS PERMITEN UNIR DOS O MAS TABLAS EN UN CAMPO QUE COMPARTEN EN COMUN
-- PARA PODER VER LA INFORMACION DE LAS FILAS QUE COMPARTEN

-- INNER JOIN --
-- UNE LA TABLA "A" CON UNA TABLA "B" Y MUESTRA LAS FILAS COINCIDENTES
SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID;

-- FULL OUTER JOIN --
-- MUESTRA TODAS LAS FILAS TANTO DE LA TABLA "A" COMO DE LA TABLA "B"
SELECT * FROM ALUMNOS
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID;

-- LEFT JOIN -- MUESTRA TODAS LAS FILAS DE LA TABLA "A" Y SOLO LO COINCIDENTE CON LA TABLA "B"
-- RIGHT JOIN -- MUESTRA TODAS LAS FILAS DE LA TABLA "B" Y SOLO LO COINCIDENTE CON LA TABLA "A"

SELECT * FROM ALUMNOS
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID;

SELECT * FROM ALUMNOS
RIGHT OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID;

-- PODEMOS UNIR MAS TABLAS, UNA TERCERA, EN ESTE CASO CARRERAS
SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID = CARRERAS_ALUMNOS.CARRERA_ID;

-- PODEMOS SELECCIONAR TAMBIEN SOLO DETERMINA INFO A MOSTRAR
SELECT ALUMNOS.ALUMNO_ID, ALUMNOS.NOMBRE, CARRERAS.NOMBRE, CARRERAS.AREA FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID = CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID = CARRERAS_ALUMNOS.CARRERA_ID;

-- IDENTIFICAR NUETRAS TABLAS POR ALIAS
SELECT A.ALUMNO_ID AS MATRICULA, A.NOMBRE AS ALUMNO, C.NOMBRE AS CARRERA, C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID = CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID = CA.CARRERA_ID;

-- ACTIVIDAD --
-- REALIZAR UN JOIN, EL QUE GUSTEN, PARA QUE MUESTRE EL NOMBRE DEL SOCIO, NOMBRE DEL LIBRO
-- Y FECHA DE DEVOLUCION DEL LIBRO

SELECT * FROM SOCIOS;
SELECT * FROM LIBROS;
SELECT * FROM AUTORES;
SELECT * FROM REGISTROS_PRESTAMO;

SELECT S.NOMBRE AS SOCIO, L.NOMBRE AS LIBRO, A.NOMBRE AS AUTOR, RP.FECHA_DEVOLUCION 
FROM REGISTROS_PRESTAMO RP
INNER JOIN SOCIOS S
ON RP.SOCIO_ID = S.SOCIO_ID
INNER JOIN LIBROS L
ON RP.LIBRO_ID = L.LIBRO_ID
INNER JOIN AUTORES A
ON L.AUTOR_ID = A.AUTOR_ID;

