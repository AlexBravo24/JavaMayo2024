-- COMENTARIOS DE UNA SOLA LINEA
-- Comentarios de una sola linea

/* Comentarios, esto sigue siendo un comentario
de
multiples
lineas
*/

-- SQL (STRUCTURED QUERY LANGUAGE, O LENGUAJE DE CONSULTA ESTRUCTURADO)
-- ¿Qué es una base de datos?
-- Conjunto de datos relacionados entre sí y que son almacenados en tablas

--DDL (Data Definition Language, o Lenguaje de definicion de datos)
-- Son comandos que se utilizan para crear o modificar la estructura u objetos
-- de base de datos (tablas, procedimientos, secuencias, disparadores)

-- La estructura de una tabla de una base de datos relacional es
-- la siguiente:
-- Toda tabla debe llevar por lo menos una llave primaria (PRIMARY KEY)
-- Y regularmente este valor es numérico entero
-- Pueden llevar llave foranea (FOREIGN KEY), lo cual es un ID o llave primaria
-- proveniente de otra tabla
-- Columnas con los diferentes tipos de dato
-- Vamos a enfocarnos en Oracle en 3 tipos de dato importantes:
-- NUMBER - Admite datos numéricos enteros y decimales
-- NVARCHAR2 - Este tipo de dato admite caracteres alfanumericos y especiales
-- además de que tiene una mejor gestión de memoria
-- (Ej. Quiero almacenar 20 caracteres indico NVARCHAR2(20))
-- DATE - Admite almacenar fecha y hora 

-- Vamos a iniciar conociendo las sentencias para crear nuestras tablas
-- y su estructura

-- EJ. VAMOS A CREAR UNA TABLA PARA GUARDAR INFORMACIÓN DE ALUMNOS
--ALUMNOS
-- ALUMNO_ID
-- NOMBRE
-- FECHANAC
-- GENERO
-- GRADO
-- CIUDAD
-- STATUS (SI ESTA INSCRITO O NO)

/*SINTAXIS BÁSICA PARA CREACIÓN DE TABLAS
CREATE TABLE nombreTabla(
nombreColumna TIPODATO PRIMARY KEY,
columna2 TIPODATO,
columna3 TIPODATO.....
);
*/

CREATE TABLE ALUMNO(
ALUMNO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(20),
GRADO NVARCHAR2(30),
CIUDAD NVARCHAR2(30),
STATUS NUMBER
);

-- COMANDO PARA ELIMINAR TABLAS CON TODO Y DATOS SI ES QUE LOS TUVIERA
DROP TABLE ALUMNO;

-- COMANDO PARA VER LA ESTRUCTURA DE UNA TABLA CREADA
DESCRIBE ALUMNO;

-- VAMOS A CREAR OTRA TABLA PARA ALMACENAR LA INFO DE LAS CARRERAS
CREATE TABLE CARRERAS(
CARRERA_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NVARCHAR2(30)
);

-- VAMOS A CREAR UNA TABLA PARA RELACIONAR LAS CARRERAS Y LOS ALUMNOS INSCRITOS
-- PARA QUE TENGAN LA POSIBILIDAD DE TENER MÁS DE UNA CARRERA (CARDINALIDAD
-- UNO A MUCHOS O MUCHOS A UNO M:1)

CREATE TABLE CARRERAS_ALUMNOS(
CA_ID NUMBER PRIMARY KEY,
CARRERA_ID NUMBER,
ALUMNO_ID NUMBER
);

DESCRIBE CARRERAS_ALUMNOS;

-- RESTRICCIONES
-- VAMOS A CREAR RESTRICCIONES EN NUESTRAS TABLAS
-- EJEMPLO DE RESTRICCION DE TIPO CHECK (SE VA A VERIFICAR O VALIDAR
-- QUE LA INFORMACION QUE SE INGRESE EN DICHAR COLUMNA, SEA LA QUE DETERMINEMOS)
-- EJ. QUE EN LA COLUMNA GENERO DE LA TABLA ALUMNO SOLO PUEDAN INGRESAR
-- 'MASCULINO' O 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHK_GENERO
CHECK (GENERO IN('MASCULINO','FEMENINO'));

-- COMANDO PARA ELIMINAR UNA RESTRICCION DE UNA TABLA
ALTER TABLE ALUMNO DROP CONSTRAINT CHK_GENERO;

-- RESTRICCION DE TIPO UNIQUE
-- NOS PERMITEN CREAR UNA RESTRICCION PARA VALORES UNICOS, CUANDO ESTOS
--NO SON LLAVES PRIMARIAS
--EJ. NO SE PUEDEN O DEBEN REPETIR LOS NOMBRES DE LAS CARRERAS
ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- CREACIÓN DE LLAVES FORANEAS
-- ESTO TAMBIÉN ES UNA RESTRICCION, PORQUE PRIMERO DEBEN EXISTIR LOS VALORES
-- DE LOS IDS O LLAVES PRIMARIAS EN SUS RESPECTIVAS TABLAS
-- PARA PODER RELACIONARSE
-- CUANDO UNA TABLA LLEVA UNA LLAVE FORANEA, SE LE CONOCE COMO
--ENTIDAD DEBIL. 
-- CUANDO UNA TABLA NO LLEVA LLAVES FORANEAS, ES DECIR, SUS DATOS NO DEPENDEN
-- DE OTRA TABLA, SE LE CONOCE COMO ENTIDAD FUERTE

-- CREAR LA RESTRICCION DE LLAVE FORANEA PARA LA TABLA CARRERAS_ALUMNOS
-- PARA RECIBIR EL ID DE LA CARRERA (CARRERA_ID)
/*ALTER TABLE nombredetabla ADD CONSTRAINT nombre restriccion
FOREIGN KEY (Nombre de la columna donde recibimos el valor)
REFERENCES nombreTabla (columna de la tabla de donde viene el valor);
*/

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_CARRERA_ID
FOREIGN KEY (CARRERA_ID)
REFERENCES CARRERAS (CARRERA_ID);

-- CREAR LLAVE FORANEA PARA LA COLUMNA ALUMNO_ID EN LA TABLA CARRERAS_ALUMNOS

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ALUMNO_ID
FOREIGN KEY (ALUMNO_ID) -- EN QUE COLUMNA RECIBIMOS EL DATO
REFERENCES ALUMNO (ALUMNO_ID);-- DE QUE TABLA Y COLUMNA PROVIENE ESE DATO

-- SENTENCIAS DML (Data Manipulation Language) - Lenguaje de manipulacion
-- de datos
-- CRUD, Create, Read, Update, Delete

-- INSERT - Insertar o crear registros en nuestras tablas
-- EJ. INSERTAR VALORES EN LA TABLA ALUMNO
DESCRIBE ALUMNO;
-- VERIFICAMOS PRIMERO ANTES DE INSERTAR FECHAS, CUAL ES EL FORMATO DE FECHA DEL SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES 
(1, 'ANDRES', '26/03/1994', 'MASCULINO', '1ER SEMESTRE', 'CDMX', 1);

INSERT INTO ALUMNO VALUES 
(2, 'ALEX', '24/04/1994', 'MASCULINO', '2DO SEMESTRE', 'PUEBLA', 1);

INSERT INTO ALUMNO VALUES 
(3, 'CARMEN', '02/07/2002', 'FEMENINO', '3ER SEMESTRE', 'XALAPA', 1);

INSERT INTO ALUMNO VALUES 
(4, 'CLAUDIA', '02/07/2002', 'FEMENINO', '3ER SEMESTRE', 'XALAPA', 1);

-- CONSULTAR LA INFO DE NUESTRAS TABLAS
-- CONSULTA GENERAL
SELECT * FROM ALUMNO;

-- PARA QUE LOS REGISTROS PERMANEZCAN EN LA BASE DE DATOS, HAY QUE
-- CONFIRMARLOS
-- ESTO ES UNICAMENTE PARA REGISTROS (DML)
COMMIT;


-- INSERTAR REGISTROS EN LA TABLA CARRERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES (1, 'NUTRICION', 'BIOLOGICAS', '8 SEMESTRES');

INSERT INTO CARRERAS VALUES (2, 'ING. EN SISTEMAS', 'EXACTAS', '8 SEMESTRES');

INSERT INTO CARRERAS VALUES (3, 'ADMINISTRACION DE EMPRESAS', 'ECONOMICAS', '8 SEMESTRES');

SELECT * FROM CARRERAS;

COMMIT;

-- ACTUALIZAR UN CAMPO EN EL CUAL TUVIMOS UN ERROR O HAY QUE MODIFICARLO

UPDATE ALUMNO SET STATUS=1; -- ESTA SENTENCIA CAMBIA EL STATUS DEL ALUMNO A 1
-- PERO EN TODAS LAS FILAS

-- SI QUEREMOS CAMBIAR EL STATUS DE UN SOLO ALUMNO, TENEMOS QUE ESPECIFICAR
-- QUE ALUMNO
UPDATE ALUMNO SET STATUS=0 WHERE ALUMNO_ID=3;

SELECT * FROM ALUMNO;

-- VAMOS A CREAR UNA TABLA QUE NOS FUNCIONE COMO CATALOGO PARA SABER
-- QUÉ SIGNIFICAN LOS STATUS DE LOS ALUMNOS
CREATE TABLE STATUS_ALUMNOS(
STATUS_ID NUMBER PRIMARY KEY,
DESCRIPCION NVARCHAR2(40)
);

-- HACEMOS INSERCIONES EN ESTABLA TABLA
INSERT INTO STATUS_ALUMNOS VALUES (0, 'EL ALUMNO ESTA INACTIVO');
INSERT INTO STATUS_ALUMNOS VALUES (1, 'EL ALUMNO ESTA ACTIVO');

SELECT * FROM STATUS_ALUMNOS;

-- VAMOS A CREAR UNA RESTRICCION DE LLAVE FORANEA, PARA QUE SOLO PODAMOS INSERTAR
-- ALUMNOS CON EL STATUS DEFINIDO EN EL CATALOGO
ALTER TABLE ALUMNO ADD CONSTRAINT FK_STATUS
FOREIGN KEY (STATUS)
REFERENCES STATUS_ALUMNOS (STATUS_ID);

-- SI NOS EQUIVOCAMOS EN EL NOMBRE DE UNA COLUMNA Y QUEREMOS CORREGIRLO
ALTER TABLE STATUS_ALUMNOS RENAME COLUMN SATUS_ID TO STATUS_ID;

-- VAMOS A PROBAR INSERTAR UN NUEVO ALUMNO CON UN STATUS QUE NO EXISTE EN NUESTRO CATALOGO
INSERT INTO ALUMNO VALUES 
(5, 'PERLA', '02/07/2004', 'FEMENINO', '2DO SEMESTRE', 'VERACRUZ', 1);

SELECT * FROM ALUMNO;

-- CAMBIAR EL NOMBRE DE UNA TABLA, PERO FUNCIONA MEJOR CUANDO APENAS CREAMOS LA TABLA
ALTER TABLE ALUMNO RENAME TO ALUMNOS;

SELECT * FROM ALUMNOS;

-- VAMOS A INSERTAR VALORES EN NUESTRA TABLA RELACIONAL CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
-- DEBEN EXISTIR PRIMERO LOS DATOS EN LAS OTRAS TABLAS, PARA PODER RELACIONARSE AQUI
INSERT INTO CARRERAS_ALUMNOS VALUES (1,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,3,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,2,3);

-- CONFIRMO MIS REGISTROS
COMMIT;

SELECT * FROM CARRERAS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- EJ. COLUMNA LLAMADA PRESUPUESTO EN LA TABLA CARRERAS
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER (8,2);
DESCRIBE CARRERAS;

SELECT * FROM CARRERAS;

-- CAMBIAR EL TIPO DE DATO DE UNA COLUMNA, SIEMPRE Y CUANDO NO TENGA DATOS
-- EJ. CAMBIAR EL TIPO DE DATO DE LA COLUMNA PRESUPUESTO A NVARCHAR2
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NVARCHAR2(30);

DESCRIBE CARRERAS;

COMMIT;

-- EJERCICIO BD ALUMNOS

-- CREAR UNA TABLA LLAMADA TUTORES
-- LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
-- TUTOR_ID (PRIMARY KEY)
-- NOMBRE
-- CLAVE DEL TUTOR (QUE ESTA CLAVE SOLO PUEDAN SER LAS LETRAS A, B, C, D)
-- INSERTAN POR LO MENOS 3 REGISTROS DE TUTORES

-- CREAR UNA TABLA RELACIONAL LLAMADA TUTORES_ALUMNOS
-- DEBE LLEVAR SU PROPIA COLUMNA CON PRIMARY KEY (ID_TA)
-- TUTOR_ID
-- ALUMNO_ID
-- CREAN LAS RESPECTIVAS LLAVES FORANEAS PARA RECIBIR LA INFO
-- PROVENIENTE DE ALUMNO_ID Y TUTOR_ID
-- INSERTAN 3 REGISTROS PARE RELACIONAR QUE TUTOR
-- LE DA ASESORÍA/CLASES A QUÉ ALUMNO

-- EJEMPLO DE LA CREACIÓN DE LA TABLA TUTORES, CON LAS RESTRICCIONES CREADAS
-- DESDE UN INICIO (CHECK)

CREATE TABLE TUTORES(
TUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
CLAVE NVARCHAR2(1),
CONSTRAINT CHK_CLAVE_TUTOR
CHECK (CLAVE IN('A','B','C','D'))
);

INSERT INTO TUTORES VALUES (1,'PEDRO','A');
INSERT INTO TUTORES VALUES (2,'ADOLFO','C');
INSERT INTO TUTORES VALUES (3,'ANDREA','D');

SELECT * FROM TUTORES;
COMMIT;

-- EJ. DE CREAR LA TABLA TUTORES_ALUMNOS CON SUS RESTRICCIONES DE LLAVES FORANEAS
-- CREADAS AL INICIO DE LA TABLA

CREATE TABLE TUTORES_ALUMNOS(
TA_ID NUMBER PRIMARY KEY,
TUTOR_ID NUMBER,
ALUMNO_ID NUMBER,
CONSTRAINT FK_TUTOR_ID_TA
FOREIGN KEY (TUTOR_ID)
REFERENCES TUTORES (TUTOR_ID),
CONSTRAINT FK_ALUMNO_ID_TA
FOREIGN KEY (ALUMNO_ID)
REFERENCES ALUMNOS (ALUMNO_ID)
);

INSERT INTO TUTORES_ALUMNOS VALUES (1, 2, 3);
INSERT INTO TUTORES_ALUMNOS VALUES (2, 1, 2);
INSERT INTO TUTORES_ALUMNOS VALUES (3, 1, 1);

SELECT * FROM TUTORES_ALUMNOS;

COMMIT;

---------------------------------------
-- EJERCICIO BIBLIOTECA --
----------------------------------------

CREATE TABLE AUTORES(
AUTOR_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
NACIONALIDAD NVARCHAR2 (30)
);

CREATE TABLE SOCIOS(
SOCIO_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10)
);

CREATE TABLE LIBROS(
LIBRO_ID NUMBER PRIMARY KEY,
TITULO NVARCHAR2 (30),
AUTOR_ID NUMBER,
CONSTRAINT FK_AUTOR_ID_LIB
FOREIGN KEY (AUTOR_ID)
REFERENCES AUTORES (AUTOR_ID),
EXISTENTES NUMBER (10)
);

CREATE TABLE PRESTAMOS(
PRESTAMO_ID NUMBER PRIMARY KEY,
SOCIO_ID NUMBER,
LIBRO_ID NUMBER,
FECHAPRE DATE,
FECHADEV DATE,
CONSTRAINT FK_SOCIO_ID_SL
FOREIGN KEY (SOCIO_ID)
REFERENCES SOCIOS (SOCIO_ID),
CONSTRAINT FK_LIBRO_ID_SL
FOREIGN KEY (LIBRO_ID)
REFERENCES LIBROS (LIBRO_ID)
);


INSERT INTO AUTORES VALUES (1, 'Jesús', 'Mexicana');
INSERT INTO AUTORES VALUES (2, 'Sofia', 'Italiana');
INSERT INTO AUTORES VALUES (3, 'Pedro', 'American');
INSERT INTO AUTORES VALUES (4, 'Teresa', 'Francesa');
INSERT INTO AUTORES VALUES (5, 'Jorge', 'Española');


INSERT INTO SOCIOS VALUES (1, 'Maria', 'San juan BJ', '5585254783');
INSERT INTO SOCIOS VALUES (2, 'Dalia', 'La esperanza Iztapalapa', '5585254783');
INSERT INTO SOCIOS VALUES (3, 'Juan', 'Del valle BJ', '5585254783');
INSERT INTO SOCIOS VALUES (4, 'Luis', 'la roma Cuauhtémoc', '5585254783');
INSERT INTO SOCIOS VALUES (5, 'Doris', 'Xochimilco', '5585254783');


INSERT INTO LIBROS VALUES (1, 'La conquista', '3', '5');
INSERT INTO LIBROS VALUES (2, 'La profesia', '2', '6');
INSERT INTO LIBROS VALUES (3, 'Historia de México', '5', '7');
INSERT INTO LIBROS VALUES (4, 'Geografia', '1', '4');
INSERT INTO LIBROS VALUES (5, 'Espñaol', '4', '10');

INSERT INTO PRESTAMOS VALUES (1, '2', '4', '05/06/2024', '15/06/2024');
INSERT INTO PRESTAMOS VALUES (2, '3', '1', '01/01/2024', '11/01/2024');
INSERT INTO PRESTAMOS VALUES (3, '5', '2', '05/01/2024', '15/01/2024');
INSERT INTO PRESTAMOS VALUES (4, '1', '5', '15/02/2024', '25/02/2024');
INSERT INTO PRESTAMOS VALUES (5, '4', '3', '13/09/2024', '23/09/2024');
------------------------------------------------------------------------
------------------------------------------------------------------------
-- SECUENCIAS Y DISPARADORES
-- CREAR SECUENCIAS
-- LAS SECUENCIAS SON OBJETOS QUE NOS PERMITEN GENERAR VALORES DE
-- NUMEROS ENTEROS DE FORMA CONSECUTIVA Y PUEDEN SER CON
-- UN INCREMENTO DETERMINADO (DE 1 EN 1, DE 2 EN 2, ETC)
-- SE UTILIZAN PARA GENERAR LLAVES PRIMARIAS Y ASÍ ASEGURARNOS
-- QUE LOS VALORES NO SE REPITAN

-- EJ. DE SINTAXIS PARA CREAR UNA SECUENCIA PARA UNA TABLA CUANDO
-- YA TENEMOS REGISTROS ALMACENADOS
SELECT * FROM ALUMNOS;

CREATE SEQUENCE ALUMNOS_SEQ -- SECUENCIA Y SU NOMBRE
START WITH 6 -- EL VALOR EN EL QUE INICIA
INCREMENT BY 1 -- EL INCREMENTO DE LA SECUENCIA
MAXVALUE 999 -- EL VALOR MÁXIMO AL QUE LLEGA SU CONTEO
MINVALUE 1 -- EL VALOR MÍNIMO DE LA SECUENCIA
NOCYCLE; -- INDICAMOS SI SE CICLA (CYCLE) O NO (NOCYCLE)

-- VAMOS A CREAR UN PROCEDIMIENTO CONOCIDO COMO DISPARADOR
-- O TRIGGER. SON UN TIPO DE PROCEDIMIENTO ALMACENADO QUE NOS PERMITE
-- DESENCADENAR UN EVENTO. EN ESTE CASO LO UTILIZAREMOS PARA INSERTAR
-- LOS VALORES DE LOS IDS QUE SE TOMARAN DE LA SECUENCIA

--EJ. DE SINTAXIS PARA UN TRIGGER PARA LA TABLA ALUMNOS
CREATE OR REPLACE TRIGGER INSERT_ALUMNOS -- NOMBRE DEL TRIGGER
BEFORE INSERT ON ALUMNOS FOR EACH ROW BEGIN -- DONDE ACTUA (TABLA)
SELECT ALUMNOS_SEQ.NEXTVAL INTO:NEW.ALUMNO_ID FROM DUAL; -- (QUE HACE)
END;

-- EJEMPLO DE COMO INSERTAR VALORES AHORA EN NUESTRA TABLA
INSERT INTO ALUMNOS VALUES
(1, 'DANIEL', '26/06/2000', 'MASCULINO','8o SEMSTRE','TOLUCA', 1);

SELECT * FROM ALUMNOS; 

-- OTRA FORMA DE INSERTAR UN REGISTRO UNA VEZ QUE TENEMOS UN DISPARADOR
-- SERIA OMITIENDO EL ID
INSERT INTO ALUMNOS (NOMBRE,FECHANAC,GENERO,GRADO,CIUDAD,STATUS) VALUES
('MIGUEL', '26/07/2000', 'MASCULINO','8o SEMSTRE','CUERNAVACA', 1);

-- VAMOS A CREAR UNA TABLA VACIA PARA PODER CREAR UNA SECUENCIA CON VALORES
-- POR DEFECTO
CREATE TABLE CLIENTES(
CLIENTE_ID NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(15),
DIRECCION NVARCHAR2(40),
INE NVARCHAR2(10),
TELEFONO NVARCHAR2(10)
);

-- EJ. CREAR UNA SECUENCIA CON VALORES POR DEFECTO
CREATE SEQUENCE CLIENTES_SEQ;

-- CREAMOS SU DISPARADOR
CREATE OR REPLACE TRIGGER INSERT_CLIENTES -- NOMBRE DEL TRIGGER
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN -- DONDE ACTUA (TABLA)
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.CLIENTE_ID FROM DUAL; -- (QUE HACE)
END;

-- EJ. INSERTAR 2 CLIENTES
INSERT INTO CLIENTES VALUES (1,'MANUEL','TAMPICO','1234567890','5566779911');
INSERT INTO CLIENTES VALUES (1,'FRANCISCO','NVO LAREDO','1234567899','5566779912');

SELECT * FROM CLIENTES;

COMMIT;

-- ACTUALIZAR DATOS DE UN REGISTRO
SELECT * FROM ALUMNOS;

UPDATE ALUMNOS SET GRADO='7O SEMESTRE', CIUDAD='CUAUTLA' WHERE ALUMNO_ID=7;

-- SENTENCIA PARA ELIMINAR REGISTROS DE UNA TABLA
DELETE FROM ALUMNOS WHERE ALUMNO_ID=1; -- NO PUEDO BORRAR UN REGISTRO DE UN ALUMNO
-- QUE TIENE RELACION CON UNA CARRERA

-- PERO SI PUEDO BORRAR UN ALUMNO QUE NO ESTE RELACIONADO EN LA TABLA CARRERAS_ALUMNOS
DELETE FROM ALUMNOS WHERE ALUMNO_ID=6;

SELECT * FROM ALUMNOS;

-- QUE PASA SI TENEMOS UNA TABLA QUE NO TIENE RELACIONES, PERO, QUE NO INDICAMOS EL ID
-- A ELIMINAR
DELETE FROM CLIENTES; -- ESTO ELIMINA A TODOS MIS CLIENTES, SI NO INDICO EL ID

SELECT * FROM CLIENTES;

-- PODEMOS UTILIZAR UN ROLLBACK PARA IR AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

-- CONSULTAR CIERTAS COLUMNAS DE UNA TABLA
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS;

-- CONSULTAR DATOS DE UNA TABLA DE ACUERDO A UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA';

-- CONSULTAR DATOS DE UNA TABLA DE ACUERDO A MÁS DE UNA CONDICION
SELECT ALUMNO_ID, NOMBRE, CIUDAD FROM ALUMNOS WHERE CIUDAD='XALAPA' AND NOMBRE='CLAUDIA';

-- VAMOS A MODIFICAR NUEVAMENTE EL DATO DE NUESTRA TABLA CARRERAS EN LA COLUMNA
-- PRESUPUESTO
ALTER TABLE CARRERAS MODIFY PRESUPUESTO NUMBER;

SELECT * FROM CARRERAS;

-- CONSULTAR DATOS QUE SE ENCUENTREN ENTRE UN RANGO ESPECIFICO DE VALORES
SELECT NOMBRE, PRESUPUESTO FROM CARRERAS WHERE PRESUPUESTO BETWEEN 20000 AND 30000;

-- CONSULTAR INFORMACION CON VALORES DE CARACTERES SIMILARES
SELECT * FROM ALUMNOS WHERE NOMBRE LIKE 'C%';

SELECT * FROM ALUMNOS WHERE NOMBRE LIKE '%A';

-- FUNCIONES DE AGREGACIÓN
-- CONSULTAR EL VALOR MÁXIMO DE UNA COLUMNA EN UNA TABLA
SELECT MAX(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL VALOR MÍNIMO DE UNA COLUMNA EN UNA TABLA
SELECT MIN(PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (PRESUPUESTO) FROM CARRERAS;

-- CONSULTAR LA SUMA DE LOS VALORES DE UNA COLUMNA
SELECT SUM (PRESUPUESTO) FROM CARRERAS;

-- REALIZAR EL CONTEO DE REGISTROS DE UNA TABLA
SELECT COUNT (*) FROM ALUMNOS;

-- FUNCION GROUP BY
SELECT COUNT (*), GENERO FROM ALUMNOS GROUP BY GENERO;

-- ORDENAR LOS REGISTROS DE ACUERDO A UN CRITERIO
SELECT * FROM ALUMNOS;

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID; -- EN UN ORDEN ASCENDENTE

SELECT * FROM ALUMNOS ORDER BY ALUMNO_ID DESC; -- EN ORDEN DESCENDENTE

SELECT * FROM ALUMNOS ORDER BY NOMBRE;

-- EJ. DE UNA CONSULTA ANIDADA
-- (CONSULTA DENTRO DE OTRA)
SELECT MAX(PRESUPUESTO) FROM CARRERAS; -- ESTO ME DEVUELVE EL VALOR MAXIMO DE PRESUPUESTO

-- CONSULTAR LA CARRERA CON EL PRESUPUESTO MÁS ALTO
SELECT * FROM CARRERAS WHERE PRESUPUESTO = (SELECT MAX(PRESUPUESTO) FROM CARRERAS);

-- ACTIVIDAD--
-- VAN A CREAR UNA SECUENCIA PARA CADA TABLA DE LA BASE DE DATOS DE LA BIBLIOTECA
-- Y UNA VEZ TENGAN LA SECUENCIA, CREAN EL DISPARADOR PARA CADA SECUENCIA Y CADA TABLA

COMMIT;

-- INNER JOIN
SELECT * FROM ALUMNOS INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID; 
--FULL OUTER JOIN
--muestra todas las filas tanto de las tablas "A"como de la tablas "B"
SELECT * FROM ALUMNOS FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

-- LEFT JOIN - MUESTRA TODAS LAS FILAS DE LA TABLA "A" TY SOLO LO COINCIDENTE CON LA "B"
-- RIGHT JOIN - MUESTRA TODAS LAS FILAS DE LA TABLA "B" Y SOLO LO COINCIDENTE CON LA "A"
SELECT * FROM ALUMNOS
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID;

-- PODEMOS UNIR MÁS TABLAS, UNA TERCERA, EN ESTE CASO CARRERAS
SELECT * FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

-- PODEMOS SELECCIONAR TAMBIEN SOLO DETERMINA INFO A MOSTRAR
SELECT ALUMNOS.ALUMNO_ID, ALUMNOS.NOMBRE, CARRERAS.NOMBRE, CARRERAS.AREA FROM ALUMNOS
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNOS.ALUMNO_ID=CARRERAS_ALUMNOS.ALUMNO_ID
INNER JOIN CARRERAS
ON CARRERAS.CARRERA_ID=CARRERAS_ALUMNOS.CARRERA_ID;

-- IDENTIFICAR NUESTRAS TABLAS POR ALIAS
SELECT A.ALUMNO_ID AS MATRICULA, A.NOMBRE AS ALUMNO, C.NOMBRE AS CARRERA, C.AREA FROM ALUMNOS A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ALUMNO_ID=CA.ALUMNO_ID
INNER JOIN CARRERAS C
ON C.CARRERA_ID=CA.CARRERA_ID;

-- ACTIVIDAD
-- REALIZAR UN JOIN, EL QUE GUSTEN, PARA QUE MUESTRE EL NOMBRE DEL SOCIO, NOMBRE DEL LIBRO
-- Y FECHA DE DEVOLUCION DEL LIBRO
SELECT S.NOMBRE, L.TITULO, P.FECHADEV FROM SOCIOS S
INNER JOIN PRESTAMOS P
ON S.SOCIO_ID=P.SOCIO_ID
INNER JOIN LIBROS L
ON L.LIBRO_ID=P.LIBRO_ID;
